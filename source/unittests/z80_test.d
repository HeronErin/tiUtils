module dissasembly.z80_test;
import dissasembly.z80;
unittest
{
    size_t i;
    string asmStr;
    i = 0;
    asmStr = ( cast(ubyte[])[0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "nop",  "`"~ asmStr ~ "` != `nop`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x01, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld bc, 0000h",  "`"~ asmStr ~ "` != `ld bc, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x02] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (bc), a",  "`"~ asmStr ~ "` != `ld (bc), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x03] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc bc",  "`"~ asmStr ~ "` != `inc bc`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x04] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc b",  "`"~ asmStr ~ "` != `inc b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x05] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec b",  "`"~ asmStr ~ "` != `dec b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x06, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, 00h",  "`"~ asmStr ~ "` != `ld b, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x07] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlca",  "`"~ asmStr ~ "` != `rlca`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x08] ).getInstruction(i).toAssembly;
    assert(asmStr == "ex af, af'",  "`"~ asmStr ~ "` != `ex af, af'`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x09] ).getInstruction(i).toAssembly;
    assert(asmStr == "add hl, bc",  "`"~ asmStr ~ "` != `add hl, bc`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x0A] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, (bc)",  "`"~ asmStr ~ "` != `ld a, (bc)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x0B] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec bc",  "`"~ asmStr ~ "` != `dec bc`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x0C] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc c",  "`"~ asmStr ~ "` != `inc c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x0D] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec c",  "`"~ asmStr ~ "` != `dec c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x0E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, 00h",  "`"~ asmStr ~ "` != `ld c, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x0F] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrca",  "`"~ asmStr ~ "` != `rrca`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x10, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "djnz 00h",  "`"~ asmStr ~ "` != `djnz 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x11, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld de, 0000h",  "`"~ asmStr ~ "` != `ld de, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x12] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (de), a",  "`"~ asmStr ~ "` != `ld (de), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x13] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc de",  "`"~ asmStr ~ "` != `inc de`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x14] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc d",  "`"~ asmStr ~ "` != `inc d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x15] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec d",  "`"~ asmStr ~ "` != `dec d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x16, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, 00h",  "`"~ asmStr ~ "` != `ld d, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x17] ).getInstruction(i).toAssembly;
    assert(asmStr == "rla",  "`"~ asmStr ~ "` != `rla`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x18, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jr 00h",  "`"~ asmStr ~ "` != `jr 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x19] ).getInstruction(i).toAssembly;
    assert(asmStr == "add hl, de",  "`"~ asmStr ~ "` != `add hl, de`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x1A] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, (de)",  "`"~ asmStr ~ "` != `ld a, (de)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x1B] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec de",  "`"~ asmStr ~ "` != `dec de`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x1C] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc e",  "`"~ asmStr ~ "` != `inc e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x1D] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec e",  "`"~ asmStr ~ "` != `dec e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x1E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, 00h",  "`"~ asmStr ~ "` != `ld e, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x1F] ).getInstruction(i).toAssembly;
    assert(asmStr == "rra",  "`"~ asmStr ~ "` != `rra`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x20, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jr nz, 00h",  "`"~ asmStr ~ "` != `jr nz, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x21, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld hl, 0000h",  "`"~ asmStr ~ "` != `ld hl, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x22, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (0000h), hl",  "`"~ asmStr ~ "` != `ld (0000h), hl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x23] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc hl",  "`"~ asmStr ~ "` != `inc hl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x24] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc h",  "`"~ asmStr ~ "` != `inc h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x25] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec h",  "`"~ asmStr ~ "` != `dec h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x26, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld h, 00h",  "`"~ asmStr ~ "` != `ld h, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x27] ).getInstruction(i).toAssembly;
    assert(asmStr == "daa",  "`"~ asmStr ~ "` != `daa`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x28, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jr z, 00h",  "`"~ asmStr ~ "` != `jr z, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x29] ).getInstruction(i).toAssembly;
    assert(asmStr == "add hl, hl",  "`"~ asmStr ~ "` != `add hl, hl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x2A, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld hl, (0000h)",  "`"~ asmStr ~ "` != `ld hl, (0000h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x2B] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec hl",  "`"~ asmStr ~ "` != `dec hl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x2C] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc l",  "`"~ asmStr ~ "` != `inc l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x2D] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec l",  "`"~ asmStr ~ "` != `dec l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x2E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld l, 00h",  "`"~ asmStr ~ "` != `ld l, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x2F] ).getInstruction(i).toAssembly;
    assert(asmStr == "cpl",  "`"~ asmStr ~ "` != `cpl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x30, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jr nc, 00h",  "`"~ asmStr ~ "` != `jr nc, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x31, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld sp, 0000h",  "`"~ asmStr ~ "` != `ld sp, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x32, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (0000h), a",  "`"~ asmStr ~ "` != `ld (0000h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x33] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc sp",  "`"~ asmStr ~ "` != `inc sp`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x34] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc (hl)",  "`"~ asmStr ~ "` != `inc (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x35] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec (hl)",  "`"~ asmStr ~ "` != `dec (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x36, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (hl), 00h",  "`"~ asmStr ~ "` != `ld (hl), 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x37] ).getInstruction(i).toAssembly;
    assert(asmStr == "scf",  "`"~ asmStr ~ "` != `scf`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x38, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jr c, 00h",  "`"~ asmStr ~ "` != `jr c, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x39] ).getInstruction(i).toAssembly;
    assert(asmStr == "add hl, sp",  "`"~ asmStr ~ "` != `add hl, sp`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x3A, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, (0000h)",  "`"~ asmStr ~ "` != `ld a, (0000h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x3B] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec sp",  "`"~ asmStr ~ "` != `dec sp`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x3C] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc a",  "`"~ asmStr ~ "` != `inc a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x3D] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec a",  "`"~ asmStr ~ "` != `dec a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x3E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, 00h",  "`"~ asmStr ~ "` != `ld a, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x3F] ).getInstruction(i).toAssembly;
    assert(asmStr == "ccf",  "`"~ asmStr ~ "` != `ccf`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x40] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, b",  "`"~ asmStr ~ "` != `ld b, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x41] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, c",  "`"~ asmStr ~ "` != `ld b, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x42] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, d",  "`"~ asmStr ~ "` != `ld b, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x43] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, e",  "`"~ asmStr ~ "` != `ld b, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x44] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, h",  "`"~ asmStr ~ "` != `ld b, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x45] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, l",  "`"~ asmStr ~ "` != `ld b, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x46] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, (hl)",  "`"~ asmStr ~ "` != `ld b, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x47] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, a",  "`"~ asmStr ~ "` != `ld b, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x48] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, b",  "`"~ asmStr ~ "` != `ld c, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x49] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, c",  "`"~ asmStr ~ "` != `ld c, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x4A] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, d",  "`"~ asmStr ~ "` != `ld c, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x4B] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, e",  "`"~ asmStr ~ "` != `ld c, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x4C] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, h",  "`"~ asmStr ~ "` != `ld c, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x4D] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, l",  "`"~ asmStr ~ "` != `ld c, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x4E] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, (hl)",  "`"~ asmStr ~ "` != `ld c, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x4F] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, a",  "`"~ asmStr ~ "` != `ld c, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x50] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, b",  "`"~ asmStr ~ "` != `ld d, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x51] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, c",  "`"~ asmStr ~ "` != `ld d, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x52] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, d",  "`"~ asmStr ~ "` != `ld d, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x53] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, e",  "`"~ asmStr ~ "` != `ld d, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x54] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, h",  "`"~ asmStr ~ "` != `ld d, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x55] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, l",  "`"~ asmStr ~ "` != `ld d, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x56] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, (hl)",  "`"~ asmStr ~ "` != `ld d, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x57] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, a",  "`"~ asmStr ~ "` != `ld d, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x58] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, b",  "`"~ asmStr ~ "` != `ld e, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x59] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, c",  "`"~ asmStr ~ "` != `ld e, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x5A] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, d",  "`"~ asmStr ~ "` != `ld e, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x5B] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, e",  "`"~ asmStr ~ "` != `ld e, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x5C] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, h",  "`"~ asmStr ~ "` != `ld e, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x5D] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, l",  "`"~ asmStr ~ "` != `ld e, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x5E] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, (hl)",  "`"~ asmStr ~ "` != `ld e, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x5F] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, a",  "`"~ asmStr ~ "` != `ld e, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x60] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld h, b",  "`"~ asmStr ~ "` != `ld h, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x61] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld h, c",  "`"~ asmStr ~ "` != `ld h, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x62] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld h, d",  "`"~ asmStr ~ "` != `ld h, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x63] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld h, e",  "`"~ asmStr ~ "` != `ld h, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x64] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld h, h",  "`"~ asmStr ~ "` != `ld h, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x65] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld h, l",  "`"~ asmStr ~ "` != `ld h, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x66] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld h, (hl)",  "`"~ asmStr ~ "` != `ld h, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x67] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld h, a",  "`"~ asmStr ~ "` != `ld h, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x68] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld l, b",  "`"~ asmStr ~ "` != `ld l, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x69] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld l, c",  "`"~ asmStr ~ "` != `ld l, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x6A] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld l, d",  "`"~ asmStr ~ "` != `ld l, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x6B] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld l, e",  "`"~ asmStr ~ "` != `ld l, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x6C] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld l, h",  "`"~ asmStr ~ "` != `ld l, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x6D] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld l, l",  "`"~ asmStr ~ "` != `ld l, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x6E] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld l, (hl)",  "`"~ asmStr ~ "` != `ld l, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x6F] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld l, a",  "`"~ asmStr ~ "` != `ld l, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x70] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (hl), b",  "`"~ asmStr ~ "` != `ld (hl), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x71] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (hl), c",  "`"~ asmStr ~ "` != `ld (hl), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x72] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (hl), d",  "`"~ asmStr ~ "` != `ld (hl), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x73] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (hl), e",  "`"~ asmStr ~ "` != `ld (hl), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x74] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (hl), h",  "`"~ asmStr ~ "` != `ld (hl), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x75] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (hl), l",  "`"~ asmStr ~ "` != `ld (hl), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x76] ).getInstruction(i).toAssembly;
    assert(asmStr == "halt",  "`"~ asmStr ~ "` != `halt`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x77] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (hl), a",  "`"~ asmStr ~ "` != `ld (hl), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x78] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, b",  "`"~ asmStr ~ "` != `ld a, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x79] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, c",  "`"~ asmStr ~ "` != `ld a, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x7A] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, d",  "`"~ asmStr ~ "` != `ld a, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x7B] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, e",  "`"~ asmStr ~ "` != `ld a, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x7C] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, h",  "`"~ asmStr ~ "` != `ld a, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x7D] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, l",  "`"~ asmStr ~ "` != `ld a, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x7E] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, (hl)",  "`"~ asmStr ~ "` != `ld a, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x7F] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, a",  "`"~ asmStr ~ "` != `ld a, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x80] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, b",  "`"~ asmStr ~ "` != `add a, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x81] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, c",  "`"~ asmStr ~ "` != `add a, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x82] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, d",  "`"~ asmStr ~ "` != `add a, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x83] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, e",  "`"~ asmStr ~ "` != `add a, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x84] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, h",  "`"~ asmStr ~ "` != `add a, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x85] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, l",  "`"~ asmStr ~ "` != `add a, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x86] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, (hl)",  "`"~ asmStr ~ "` != `add a, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x87] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, a",  "`"~ asmStr ~ "` != `add a, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x88] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, b",  "`"~ asmStr ~ "` != `adc a, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x89] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, c",  "`"~ asmStr ~ "` != `adc a, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x8A] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, d",  "`"~ asmStr ~ "` != `adc a, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x8B] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, e",  "`"~ asmStr ~ "` != `adc a, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x8C] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, h",  "`"~ asmStr ~ "` != `adc a, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x8D] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, l",  "`"~ asmStr ~ "` != `adc a, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x8E] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, (hl)",  "`"~ asmStr ~ "` != `adc a, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x8F] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, a",  "`"~ asmStr ~ "` != `adc a, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x90] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub b",  "`"~ asmStr ~ "` != `sub b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x91] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub c",  "`"~ asmStr ~ "` != `sub c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x92] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub d",  "`"~ asmStr ~ "` != `sub d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x93] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub e",  "`"~ asmStr ~ "` != `sub e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x94] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub h",  "`"~ asmStr ~ "` != `sub h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x95] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub l",  "`"~ asmStr ~ "` != `sub l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x96] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub (hl)",  "`"~ asmStr ~ "` != `sub (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x97] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub a",  "`"~ asmStr ~ "` != `sub a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x98] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, b",  "`"~ asmStr ~ "` != `sbc a, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x99] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, c",  "`"~ asmStr ~ "` != `sbc a, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x9A] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, d",  "`"~ asmStr ~ "` != `sbc a, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x9B] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, e",  "`"~ asmStr ~ "` != `sbc a, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x9C] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, h",  "`"~ asmStr ~ "` != `sbc a, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x9D] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, l",  "`"~ asmStr ~ "` != `sbc a, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x9E] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, (hl)",  "`"~ asmStr ~ "` != `sbc a, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x9F] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, a",  "`"~ asmStr ~ "` != `sbc a, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xA0] ).getInstruction(i).toAssembly;
    assert(asmStr == "and b",  "`"~ asmStr ~ "` != `and b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xA1] ).getInstruction(i).toAssembly;
    assert(asmStr == "and c",  "`"~ asmStr ~ "` != `and c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xA2] ).getInstruction(i).toAssembly;
    assert(asmStr == "and d",  "`"~ asmStr ~ "` != `and d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xA3] ).getInstruction(i).toAssembly;
    assert(asmStr == "and e",  "`"~ asmStr ~ "` != `and e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xA4] ).getInstruction(i).toAssembly;
    assert(asmStr == "and h",  "`"~ asmStr ~ "` != `and h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xA5] ).getInstruction(i).toAssembly;
    assert(asmStr == "and l",  "`"~ asmStr ~ "` != `and l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xA6] ).getInstruction(i).toAssembly;
    assert(asmStr == "and (hl)",  "`"~ asmStr ~ "` != `and (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xA7] ).getInstruction(i).toAssembly;
    assert(asmStr == "and a",  "`"~ asmStr ~ "` != `and a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xA8] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor b",  "`"~ asmStr ~ "` != `xor b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xA9] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor c",  "`"~ asmStr ~ "` != `xor c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xAA] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor d",  "`"~ asmStr ~ "` != `xor d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xAB] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor e",  "`"~ asmStr ~ "` != `xor e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xAC] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor h",  "`"~ asmStr ~ "` != `xor h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xAD] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor l",  "`"~ asmStr ~ "` != `xor l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xAE] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor (hl)",  "`"~ asmStr ~ "` != `xor (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xAF] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor a",  "`"~ asmStr ~ "` != `xor a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xB0] ).getInstruction(i).toAssembly;
    assert(asmStr == "or b",  "`"~ asmStr ~ "` != `or b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xB1] ).getInstruction(i).toAssembly;
    assert(asmStr == "or c",  "`"~ asmStr ~ "` != `or c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xB2] ).getInstruction(i).toAssembly;
    assert(asmStr == "or d",  "`"~ asmStr ~ "` != `or d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xB3] ).getInstruction(i).toAssembly;
    assert(asmStr == "or e",  "`"~ asmStr ~ "` != `or e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xB4] ).getInstruction(i).toAssembly;
    assert(asmStr == "or h",  "`"~ asmStr ~ "` != `or h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xB5] ).getInstruction(i).toAssembly;
    assert(asmStr == "or l",  "`"~ asmStr ~ "` != `or l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xB6] ).getInstruction(i).toAssembly;
    assert(asmStr == "or (hl)",  "`"~ asmStr ~ "` != `or (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xB7] ).getInstruction(i).toAssembly;
    assert(asmStr == "or a",  "`"~ asmStr ~ "` != `or a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xB8] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp b",  "`"~ asmStr ~ "` != `cp b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xB9] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp c",  "`"~ asmStr ~ "` != `cp c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xBA] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp d",  "`"~ asmStr ~ "` != `cp d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xBB] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp e",  "`"~ asmStr ~ "` != `cp e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xBC] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp h",  "`"~ asmStr ~ "` != `cp h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xBD] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp l",  "`"~ asmStr ~ "` != `cp l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xBE] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp (hl)",  "`"~ asmStr ~ "` != `cp (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xBF] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp a",  "`"~ asmStr ~ "` != `cp a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xC0] ).getInstruction(i).toAssembly;
    assert(asmStr == "ret nz",  "`"~ asmStr ~ "` != `ret nz`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xC1] ).getInstruction(i).toAssembly;
    assert(asmStr == "pop bc",  "`"~ asmStr ~ "` != `pop bc`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xC2, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jp nz, 0000h",  "`"~ asmStr ~ "` != `jp nz, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xC3, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jp 0000h",  "`"~ asmStr ~ "` != `jp 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xC4, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "call nz, 0000h",  "`"~ asmStr ~ "` != `call nz, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xC5] ).getInstruction(i).toAssembly;
    assert(asmStr == "push bc",  "`"~ asmStr ~ "` != `push bc`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xC6, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, 00h",  "`"~ asmStr ~ "` != `add a, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xC7] ).getInstruction(i).toAssembly;
    assert(asmStr == "rst 00h",  "`"~ asmStr ~ "` != `rst 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xC8] ).getInstruction(i).toAssembly;
    assert(asmStr == "ret z",  "`"~ asmStr ~ "` != `ret z`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xC9] ).getInstruction(i).toAssembly;
    assert(asmStr == "ret",  "`"~ asmStr ~ "` != `ret`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCA, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jp z, 0000h",  "`"~ asmStr ~ "` != `jp z, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCC, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "call z, 0000h",  "`"~ asmStr ~ "` != `call z, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCD, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "call 0000h",  "`"~ asmStr ~ "` != `call 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCE, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, 00h",  "`"~ asmStr ~ "` != `adc a, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCF] ).getInstruction(i).toAssembly;
    assert(asmStr == "rst 08h",  "`"~ asmStr ~ "` != `rst 08h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xD0] ).getInstruction(i).toAssembly;
    assert(asmStr == "ret nc",  "`"~ asmStr ~ "` != `ret nc`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xD1] ).getInstruction(i).toAssembly;
    assert(asmStr == "pop de",  "`"~ asmStr ~ "` != `pop de`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xD2, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jp nc, 0000h",  "`"~ asmStr ~ "` != `jp nc, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xD3, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "out (00h), a",  "`"~ asmStr ~ "` != `out (00h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xD4, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "call nc, 0000h",  "`"~ asmStr ~ "` != `call nc, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xD5] ).getInstruction(i).toAssembly;
    assert(asmStr == "push de",  "`"~ asmStr ~ "` != `push de`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xD6, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub 00h",  "`"~ asmStr ~ "` != `sub 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xD7] ).getInstruction(i).toAssembly;
    assert(asmStr == "rst 10h",  "`"~ asmStr ~ "` != `rst 10h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xD8] ).getInstruction(i).toAssembly;
    assert(asmStr == "ret c",  "`"~ asmStr ~ "` != `ret c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xD9] ).getInstruction(i).toAssembly;
    assert(asmStr == "exx",  "`"~ asmStr ~ "` != `exx`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDA, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jp c, 0000h",  "`"~ asmStr ~ "` != `jp c, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDB, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "in a, (00h)",  "`"~ asmStr ~ "` != `in a, (00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDC, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "call c, 0000h",  "`"~ asmStr ~ "` != `call c, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDE, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, 00h",  "`"~ asmStr ~ "` != `sbc a, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDF] ).getInstruction(i).toAssembly;
    assert(asmStr == "rst 18h",  "`"~ asmStr ~ "` != `rst 18h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xE0] ).getInstruction(i).toAssembly;
    assert(asmStr == "ret po",  "`"~ asmStr ~ "` != `ret po`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xE1] ).getInstruction(i).toAssembly;
    assert(asmStr == "pop hl",  "`"~ asmStr ~ "` != `pop hl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xE2, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jp po, 0000h",  "`"~ asmStr ~ "` != `jp po, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xE3] ).getInstruction(i).toAssembly;
    assert(asmStr == "ex (sp), hl",  "`"~ asmStr ~ "` != `ex (sp), hl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xE4, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "call po, 0000h",  "`"~ asmStr ~ "` != `call po, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xE5] ).getInstruction(i).toAssembly;
    assert(asmStr == "push hl",  "`"~ asmStr ~ "` != `push hl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xE6, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "and 00h",  "`"~ asmStr ~ "` != `and 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xE7] ).getInstruction(i).toAssembly;
    assert(asmStr == "rst 20h",  "`"~ asmStr ~ "` != `rst 20h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xE8] ).getInstruction(i).toAssembly;
    assert(asmStr == "ret pe",  "`"~ asmStr ~ "` != `ret pe`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xE9] ).getInstruction(i).toAssembly;
    assert(asmStr == "jp (hl)",  "`"~ asmStr ~ "` != `jp (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xEA, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jp pe, 0000h",  "`"~ asmStr ~ "` != `jp pe, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xEB] ).getInstruction(i).toAssembly;
    assert(asmStr == "ex de, hl",  "`"~ asmStr ~ "` != `ex de, hl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xEC, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "call pe, 0000h",  "`"~ asmStr ~ "` != `call pe, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xEE, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor 00h",  "`"~ asmStr ~ "` != `xor 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xEF] ).getInstruction(i).toAssembly;
    assert(asmStr == "rst 28h",  "`"~ asmStr ~ "` != `rst 28h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xF0] ).getInstruction(i).toAssembly;
    assert(asmStr == "ret p",  "`"~ asmStr ~ "` != `ret p`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xF1] ).getInstruction(i).toAssembly;
    assert(asmStr == "pop af",  "`"~ asmStr ~ "` != `pop af`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xF2, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jp p, 0000h",  "`"~ asmStr ~ "` != `jp p, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xF3] ).getInstruction(i).toAssembly;
    assert(asmStr == "di",  "`"~ asmStr ~ "` != `di`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xF4, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "call p, 0000h",  "`"~ asmStr ~ "` != `call p, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xF5] ).getInstruction(i).toAssembly;
    assert(asmStr == "push af",  "`"~ asmStr ~ "` != `push af`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xF6, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "or 00h",  "`"~ asmStr ~ "` != `or 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xF7] ).getInstruction(i).toAssembly;
    assert(asmStr == "rst 30h",  "`"~ asmStr ~ "` != `rst 30h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xF8] ).getInstruction(i).toAssembly;
    assert(asmStr == "ret m",  "`"~ asmStr ~ "` != `ret m`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xF9] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld sp, hl",  "`"~ asmStr ~ "` != `ld sp, hl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFA, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jp m, 0000h",  "`"~ asmStr ~ "` != `jp m, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFB] ).getInstruction(i).toAssembly;
    assert(asmStr == "ei",  "`"~ asmStr ~ "` != `ei`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFC, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "call m, 0000h",  "`"~ asmStr ~ "` != `call m, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFE, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp 00h",  "`"~ asmStr ~ "` != `cp 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFF] ).getInstruction(i).toAssembly;
    assert(asmStr == "rst 38h",  "`"~ asmStr ~ "` != `rst 38h`");
    
}
unittest
{
    size_t i;
    string asmStr;
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc b",  "`"~ asmStr ~ "` != `rlc b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x01] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc c",  "`"~ asmStr ~ "` != `rlc c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x02] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc d",  "`"~ asmStr ~ "` != `rlc d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x03] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc e",  "`"~ asmStr ~ "` != `rlc e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x04] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc h",  "`"~ asmStr ~ "` != `rlc h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x05] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc l",  "`"~ asmStr ~ "` != `rlc l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x06] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc (hl)",  "`"~ asmStr ~ "` != `rlc (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x07] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc a",  "`"~ asmStr ~ "` != `rlc a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x08] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc b",  "`"~ asmStr ~ "` != `rrc b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x09] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc c",  "`"~ asmStr ~ "` != `rrc c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x0A] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc d",  "`"~ asmStr ~ "` != `rrc d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x0B] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc e",  "`"~ asmStr ~ "` != `rrc e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x0C] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc h",  "`"~ asmStr ~ "` != `rrc h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x0D] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc l",  "`"~ asmStr ~ "` != `rrc l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x0E] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc (hl)",  "`"~ asmStr ~ "` != `rrc (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x0F] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc a",  "`"~ asmStr ~ "` != `rrc a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x10] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl b",  "`"~ asmStr ~ "` != `rl b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x11] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl c",  "`"~ asmStr ~ "` != `rl c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x12] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl d",  "`"~ asmStr ~ "` != `rl d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x13] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl e",  "`"~ asmStr ~ "` != `rl e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x14] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl h",  "`"~ asmStr ~ "` != `rl h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x15] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl l",  "`"~ asmStr ~ "` != `rl l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x16] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl (hl)",  "`"~ asmStr ~ "` != `rl (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x17] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl a",  "`"~ asmStr ~ "` != `rl a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x18] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr b",  "`"~ asmStr ~ "` != `rr b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x19] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr c",  "`"~ asmStr ~ "` != `rr c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x1A] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr d",  "`"~ asmStr ~ "` != `rr d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x1B] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr e",  "`"~ asmStr ~ "` != `rr e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x1C] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr h",  "`"~ asmStr ~ "` != `rr h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x1D] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr l",  "`"~ asmStr ~ "` != `rr l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x1E] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr (hl)",  "`"~ asmStr ~ "` != `rr (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x1F] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr a",  "`"~ asmStr ~ "` != `rr a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x20] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla b",  "`"~ asmStr ~ "` != `sla b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x21] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla c",  "`"~ asmStr ~ "` != `sla c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x22] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla d",  "`"~ asmStr ~ "` != `sla d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x23] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla e",  "`"~ asmStr ~ "` != `sla e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x24] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla h",  "`"~ asmStr ~ "` != `sla h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x25] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla l",  "`"~ asmStr ~ "` != `sla l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x26] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla (hl)",  "`"~ asmStr ~ "` != `sla (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x27] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla a",  "`"~ asmStr ~ "` != `sla a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x28] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra b",  "`"~ asmStr ~ "` != `sra b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x29] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra c",  "`"~ asmStr ~ "` != `sra c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x2A] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra d",  "`"~ asmStr ~ "` != `sra d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x2B] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra e",  "`"~ asmStr ~ "` != `sra e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x2C] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra h",  "`"~ asmStr ~ "` != `sra h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x2D] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra l",  "`"~ asmStr ~ "` != `sra l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x2E] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra (hl)",  "`"~ asmStr ~ "` != `sra (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x2F] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra a",  "`"~ asmStr ~ "` != `sra a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x30] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll b",  "`"~ asmStr ~ "` != `sll b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x31] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll c",  "`"~ asmStr ~ "` != `sll c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x32] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll d",  "`"~ asmStr ~ "` != `sll d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x33] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll e",  "`"~ asmStr ~ "` != `sll e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x34] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll h",  "`"~ asmStr ~ "` != `sll h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x35] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll l",  "`"~ asmStr ~ "` != `sll l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x36] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll (hl)",  "`"~ asmStr ~ "` != `sll (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x37] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll a",  "`"~ asmStr ~ "` != `sll a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x38] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl b",  "`"~ asmStr ~ "` != `srl b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x39] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl c",  "`"~ asmStr ~ "` != `srl c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x3A] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl d",  "`"~ asmStr ~ "` != `srl d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x3B] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl e",  "`"~ asmStr ~ "` != `srl e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x3C] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl h",  "`"~ asmStr ~ "` != `srl h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x3D] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl l",  "`"~ asmStr ~ "` != `srl l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x3E] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl (hl)",  "`"~ asmStr ~ "` != `srl (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x3F] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl a",  "`"~ asmStr ~ "` != `srl a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x40] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, b",  "`"~ asmStr ~ "` != `bit 0, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x41] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, c",  "`"~ asmStr ~ "` != `bit 0, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x42] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, d",  "`"~ asmStr ~ "` != `bit 0, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x43] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, e",  "`"~ asmStr ~ "` != `bit 0, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x44] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, h",  "`"~ asmStr ~ "` != `bit 0, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x45] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, l",  "`"~ asmStr ~ "` != `bit 0, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x46] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, (hl)",  "`"~ asmStr ~ "` != `bit 0, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x47] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, a",  "`"~ asmStr ~ "` != `bit 0, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x48] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, b",  "`"~ asmStr ~ "` != `bit 1, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x49] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, c",  "`"~ asmStr ~ "` != `bit 1, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x4A] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, d",  "`"~ asmStr ~ "` != `bit 1, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x4B] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, e",  "`"~ asmStr ~ "` != `bit 1, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x4C] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, h",  "`"~ asmStr ~ "` != `bit 1, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x4D] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, l",  "`"~ asmStr ~ "` != `bit 1, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x4E] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, (hl)",  "`"~ asmStr ~ "` != `bit 1, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x4F] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, a",  "`"~ asmStr ~ "` != `bit 1, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x50] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, b",  "`"~ asmStr ~ "` != `bit 2, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x51] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, c",  "`"~ asmStr ~ "` != `bit 2, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x52] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, d",  "`"~ asmStr ~ "` != `bit 2, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x53] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, e",  "`"~ asmStr ~ "` != `bit 2, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x54] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, h",  "`"~ asmStr ~ "` != `bit 2, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x55] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, l",  "`"~ asmStr ~ "` != `bit 2, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x56] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, (hl)",  "`"~ asmStr ~ "` != `bit 2, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x57] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, a",  "`"~ asmStr ~ "` != `bit 2, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x58] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, b",  "`"~ asmStr ~ "` != `bit 3, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x59] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, c",  "`"~ asmStr ~ "` != `bit 3, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x5A] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, d",  "`"~ asmStr ~ "` != `bit 3, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x5B] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, e",  "`"~ asmStr ~ "` != `bit 3, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x5C] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, h",  "`"~ asmStr ~ "` != `bit 3, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x5D] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, l",  "`"~ asmStr ~ "` != `bit 3, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x5E] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, (hl)",  "`"~ asmStr ~ "` != `bit 3, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x5F] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, a",  "`"~ asmStr ~ "` != `bit 3, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x60] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, b",  "`"~ asmStr ~ "` != `bit 4, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x61] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, c",  "`"~ asmStr ~ "` != `bit 4, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x62] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, d",  "`"~ asmStr ~ "` != `bit 4, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x63] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, e",  "`"~ asmStr ~ "` != `bit 4, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x64] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, h",  "`"~ asmStr ~ "` != `bit 4, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x65] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, l",  "`"~ asmStr ~ "` != `bit 4, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x66] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, (hl)",  "`"~ asmStr ~ "` != `bit 4, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x67] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, a",  "`"~ asmStr ~ "` != `bit 4, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x68] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, b",  "`"~ asmStr ~ "` != `bit 5, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x69] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, c",  "`"~ asmStr ~ "` != `bit 5, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x6A] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, d",  "`"~ asmStr ~ "` != `bit 5, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x6B] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, e",  "`"~ asmStr ~ "` != `bit 5, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x6C] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, h",  "`"~ asmStr ~ "` != `bit 5, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x6D] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, l",  "`"~ asmStr ~ "` != `bit 5, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x6E] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, (hl)",  "`"~ asmStr ~ "` != `bit 5, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x6F] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, a",  "`"~ asmStr ~ "` != `bit 5, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x70] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, b",  "`"~ asmStr ~ "` != `bit 6, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x71] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, c",  "`"~ asmStr ~ "` != `bit 6, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x72] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, d",  "`"~ asmStr ~ "` != `bit 6, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x73] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, e",  "`"~ asmStr ~ "` != `bit 6, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x74] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, h",  "`"~ asmStr ~ "` != `bit 6, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x75] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, l",  "`"~ asmStr ~ "` != `bit 6, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x76] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, (hl)",  "`"~ asmStr ~ "` != `bit 6, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x77] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, a",  "`"~ asmStr ~ "` != `bit 6, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x78] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, b",  "`"~ asmStr ~ "` != `bit 7, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x79] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, c",  "`"~ asmStr ~ "` != `bit 7, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x7A] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, d",  "`"~ asmStr ~ "` != `bit 7, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x7B] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, e",  "`"~ asmStr ~ "` != `bit 7, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x7C] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, h",  "`"~ asmStr ~ "` != `bit 7, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x7D] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, l",  "`"~ asmStr ~ "` != `bit 7, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x7E] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, (hl)",  "`"~ asmStr ~ "` != `bit 7, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x7F] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, a",  "`"~ asmStr ~ "` != `bit 7, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x80] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, b",  "`"~ asmStr ~ "` != `res 0, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x81] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, c",  "`"~ asmStr ~ "` != `res 0, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x82] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, d",  "`"~ asmStr ~ "` != `res 0, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x83] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, e",  "`"~ asmStr ~ "` != `res 0, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x84] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, h",  "`"~ asmStr ~ "` != `res 0, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x85] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, l",  "`"~ asmStr ~ "` != `res 0, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x86] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, (hl)",  "`"~ asmStr ~ "` != `res 0, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x87] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, a",  "`"~ asmStr ~ "` != `res 0, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x88] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, b",  "`"~ asmStr ~ "` != `res 1, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x89] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, c",  "`"~ asmStr ~ "` != `res 1, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x8A] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, d",  "`"~ asmStr ~ "` != `res 1, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x8B] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, e",  "`"~ asmStr ~ "` != `res 1, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x8C] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, h",  "`"~ asmStr ~ "` != `res 1, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x8D] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, l",  "`"~ asmStr ~ "` != `res 1, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x8E] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, (hl)",  "`"~ asmStr ~ "` != `res 1, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x8F] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, a",  "`"~ asmStr ~ "` != `res 1, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x90] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, b",  "`"~ asmStr ~ "` != `res 2, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x91] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, c",  "`"~ asmStr ~ "` != `res 2, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x92] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, d",  "`"~ asmStr ~ "` != `res 2, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x93] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, e",  "`"~ asmStr ~ "` != `res 2, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x94] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, h",  "`"~ asmStr ~ "` != `res 2, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x95] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, l",  "`"~ asmStr ~ "` != `res 2, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x96] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, (hl)",  "`"~ asmStr ~ "` != `res 2, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x97] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, a",  "`"~ asmStr ~ "` != `res 2, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x98] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, b",  "`"~ asmStr ~ "` != `res 3, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x99] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, c",  "`"~ asmStr ~ "` != `res 3, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x9A] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, d",  "`"~ asmStr ~ "` != `res 3, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x9B] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, e",  "`"~ asmStr ~ "` != `res 3, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x9C] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, h",  "`"~ asmStr ~ "` != `res 3, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x9D] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, l",  "`"~ asmStr ~ "` != `res 3, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x9E] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, (hl)",  "`"~ asmStr ~ "` != `res 3, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0x9F] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, a",  "`"~ asmStr ~ "` != `res 3, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xA0] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, b",  "`"~ asmStr ~ "` != `res 4, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xA1] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, c",  "`"~ asmStr ~ "` != `res 4, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xA2] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, d",  "`"~ asmStr ~ "` != `res 4, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xA3] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, e",  "`"~ asmStr ~ "` != `res 4, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xA4] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, h",  "`"~ asmStr ~ "` != `res 4, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xA5] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, l",  "`"~ asmStr ~ "` != `res 4, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xA6] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, (hl)",  "`"~ asmStr ~ "` != `res 4, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xA7] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, a",  "`"~ asmStr ~ "` != `res 4, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xA8] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, b",  "`"~ asmStr ~ "` != `res 5, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xA9] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, c",  "`"~ asmStr ~ "` != `res 5, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xAA] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, d",  "`"~ asmStr ~ "` != `res 5, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xAB] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, e",  "`"~ asmStr ~ "` != `res 5, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xAC] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, h",  "`"~ asmStr ~ "` != `res 5, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xAD] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, l",  "`"~ asmStr ~ "` != `res 5, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xAE] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, (hl)",  "`"~ asmStr ~ "` != `res 5, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xAF] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, a",  "`"~ asmStr ~ "` != `res 5, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xB0] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, b",  "`"~ asmStr ~ "` != `res 6, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xB1] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, c",  "`"~ asmStr ~ "` != `res 6, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xB2] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, d",  "`"~ asmStr ~ "` != `res 6, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xB3] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, e",  "`"~ asmStr ~ "` != `res 6, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xB4] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, h",  "`"~ asmStr ~ "` != `res 6, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xB5] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, l",  "`"~ asmStr ~ "` != `res 6, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xB6] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, (hl)",  "`"~ asmStr ~ "` != `res 6, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xB7] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, a",  "`"~ asmStr ~ "` != `res 6, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xB8] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, b",  "`"~ asmStr ~ "` != `res 7, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xB9] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, c",  "`"~ asmStr ~ "` != `res 7, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xBA] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, d",  "`"~ asmStr ~ "` != `res 7, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xBB] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, e",  "`"~ asmStr ~ "` != `res 7, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xBC] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, h",  "`"~ asmStr ~ "` != `res 7, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xBD] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, l",  "`"~ asmStr ~ "` != `res 7, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xBE] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, (hl)",  "`"~ asmStr ~ "` != `res 7, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xBF] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, a",  "`"~ asmStr ~ "` != `res 7, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xC0] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, b",  "`"~ asmStr ~ "` != `set 0, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xC1] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, c",  "`"~ asmStr ~ "` != `set 0, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xC2] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, d",  "`"~ asmStr ~ "` != `set 0, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xC3] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, e",  "`"~ asmStr ~ "` != `set 0, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xC4] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, h",  "`"~ asmStr ~ "` != `set 0, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xC5] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, l",  "`"~ asmStr ~ "` != `set 0, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xC6] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, (hl)",  "`"~ asmStr ~ "` != `set 0, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xC7] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, a",  "`"~ asmStr ~ "` != `set 0, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xC8] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, b",  "`"~ asmStr ~ "` != `set 1, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xC9] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, c",  "`"~ asmStr ~ "` != `set 1, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xCA] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, d",  "`"~ asmStr ~ "` != `set 1, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xCB] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, e",  "`"~ asmStr ~ "` != `set 1, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xCC] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, h",  "`"~ asmStr ~ "` != `set 1, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xCD] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, l",  "`"~ asmStr ~ "` != `set 1, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xCE] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, (hl)",  "`"~ asmStr ~ "` != `set 1, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xCF] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, a",  "`"~ asmStr ~ "` != `set 1, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xD0] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, b",  "`"~ asmStr ~ "` != `set 2, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xD1] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, c",  "`"~ asmStr ~ "` != `set 2, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xD2] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, d",  "`"~ asmStr ~ "` != `set 2, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xD3] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, e",  "`"~ asmStr ~ "` != `set 2, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xD4] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, h",  "`"~ asmStr ~ "` != `set 2, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xD5] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, l",  "`"~ asmStr ~ "` != `set 2, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xD6] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, (hl)",  "`"~ asmStr ~ "` != `set 2, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xD7] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, a",  "`"~ asmStr ~ "` != `set 2, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xD8] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, b",  "`"~ asmStr ~ "` != `set 3, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xD9] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, c",  "`"~ asmStr ~ "` != `set 3, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xDA] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, d",  "`"~ asmStr ~ "` != `set 3, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xDB] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, e",  "`"~ asmStr ~ "` != `set 3, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xDC] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, h",  "`"~ asmStr ~ "` != `set 3, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xDD] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, l",  "`"~ asmStr ~ "` != `set 3, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xDE] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, (hl)",  "`"~ asmStr ~ "` != `set 3, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xDF] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, a",  "`"~ asmStr ~ "` != `set 3, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xE0] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, b",  "`"~ asmStr ~ "` != `set 4, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xE1] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, c",  "`"~ asmStr ~ "` != `set 4, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xE2] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, d",  "`"~ asmStr ~ "` != `set 4, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xE3] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, e",  "`"~ asmStr ~ "` != `set 4, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xE4] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, h",  "`"~ asmStr ~ "` != `set 4, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xE5] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, l",  "`"~ asmStr ~ "` != `set 4, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xE6] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, (hl)",  "`"~ asmStr ~ "` != `set 4, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xE7] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, a",  "`"~ asmStr ~ "` != `set 4, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xE8] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, b",  "`"~ asmStr ~ "` != `set 5, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xE9] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, c",  "`"~ asmStr ~ "` != `set 5, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xEA] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, d",  "`"~ asmStr ~ "` != `set 5, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xEB] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, e",  "`"~ asmStr ~ "` != `set 5, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xEC] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, h",  "`"~ asmStr ~ "` != `set 5, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xED] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, l",  "`"~ asmStr ~ "` != `set 5, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xEE] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, (hl)",  "`"~ asmStr ~ "` != `set 5, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xEF] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, a",  "`"~ asmStr ~ "` != `set 5, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xF0] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, b",  "`"~ asmStr ~ "` != `set 6, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xF1] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, c",  "`"~ asmStr ~ "` != `set 6, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xF2] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, d",  "`"~ asmStr ~ "` != `set 6, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xF3] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, e",  "`"~ asmStr ~ "` != `set 6, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xF4] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, h",  "`"~ asmStr ~ "` != `set 6, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xF5] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, l",  "`"~ asmStr ~ "` != `set 6, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xF6] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, (hl)",  "`"~ asmStr ~ "` != `set 6, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xF7] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, a",  "`"~ asmStr ~ "` != `set 6, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xF8] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, b",  "`"~ asmStr ~ "` != `set 7, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xF9] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, c",  "`"~ asmStr ~ "` != `set 7, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xFA] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, d",  "`"~ asmStr ~ "` != `set 7, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xFB] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, e",  "`"~ asmStr ~ "` != `set 7, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xFC] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, h",  "`"~ asmStr ~ "` != `set 7, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xFD] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, l",  "`"~ asmStr ~ "` != `set 7, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xFE] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, (hl)",  "`"~ asmStr ~ "` != `set 7, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCB, 0xFF] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, a",  "`"~ asmStr ~ "` != `set 7, a`");
}
unittest
{
    size_t i;
    string asmStr;
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "in0 b, (00h)",  "`"~ asmStr ~ "` != `in0 b, (00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x01, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "out0 (00h), b",  "`"~ asmStr ~ "` != `out0 (00h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x04] ).getInstruction(i).toAssembly;
    assert(asmStr == "tst b",  "`"~ asmStr ~ "` != `tst b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x08, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "in0 c, (00h)",  "`"~ asmStr ~ "` != `in0 c, (00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x09, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "out0 (00h), c",  "`"~ asmStr ~ "` != `out0 (00h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x0C] ).getInstruction(i).toAssembly;
    assert(asmStr == "tst c",  "`"~ asmStr ~ "` != `tst c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x10, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "in0 d, (00h)",  "`"~ asmStr ~ "` != `in0 d, (00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x11, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "out0 (00h), d",  "`"~ asmStr ~ "` != `out0 (00h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x14] ).getInstruction(i).toAssembly;
    assert(asmStr == "tst d",  "`"~ asmStr ~ "` != `tst d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x18, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "in0 e, (00h)",  "`"~ asmStr ~ "` != `in0 e, (00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x19, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "out0 (00h), e",  "`"~ asmStr ~ "` != `out0 (00h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x1C] ).getInstruction(i).toAssembly;
    assert(asmStr == "tst e",  "`"~ asmStr ~ "` != `tst e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x20, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "in0 h, (00h)",  "`"~ asmStr ~ "` != `in0 h, (00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x21, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "out0 (00h), h",  "`"~ asmStr ~ "` != `out0 (00h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x24] ).getInstruction(i).toAssembly;
    assert(asmStr == "tst h",  "`"~ asmStr ~ "` != `tst h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x28, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "in0 l, (00h)",  "`"~ asmStr ~ "` != `in0 l, (00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x29, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "out0 (00h), l",  "`"~ asmStr ~ "` != `out0 (00h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x2C] ).getInstruction(i).toAssembly;
    assert(asmStr == "tst l",  "`"~ asmStr ~ "` != `tst l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x34] ).getInstruction(i).toAssembly;
    assert(asmStr == "tst (hl)",  "`"~ asmStr ~ "` != `tst (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x38, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "in0 a, (00h)",  "`"~ asmStr ~ "` != `in0 a, (00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x39, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "out0 (00h), a",  "`"~ asmStr ~ "` != `out0 (00h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x3C] ).getInstruction(i).toAssembly;
    assert(asmStr == "tst a",  "`"~ asmStr ~ "` != `tst a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x40] ).getInstruction(i).toAssembly;
    assert(asmStr == "in b, (c)",  "`"~ asmStr ~ "` != `in b, (c)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x41] ).getInstruction(i).toAssembly;
    assert(asmStr == "out (c), b",  "`"~ asmStr ~ "` != `out (c), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x42] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc hl, bc",  "`"~ asmStr ~ "` != `sbc hl, bc`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x43, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (0000h), bc",  "`"~ asmStr ~ "` != `ld (0000h), bc`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x44] ).getInstruction(i).toAssembly;
    assert(asmStr == "neg",  "`"~ asmStr ~ "` != `neg`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x45] ).getInstruction(i).toAssembly;
    assert(asmStr == "retn",  "`"~ asmStr ~ "` != `retn`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x46] ).getInstruction(i).toAssembly;
    assert(asmStr == "im 0",  "`"~ asmStr ~ "` != `im 0`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x47] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld i, a",  "`"~ asmStr ~ "` != `ld i, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x48] ).getInstruction(i).toAssembly;
    assert(asmStr == "in c, (c)",  "`"~ asmStr ~ "` != `in c, (c)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x49] ).getInstruction(i).toAssembly;
    assert(asmStr == "out (c), c",  "`"~ asmStr ~ "` != `out (c), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x4A] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc hl, bc",  "`"~ asmStr ~ "` != `adc hl, bc`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x4B, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld bc, (0000h)",  "`"~ asmStr ~ "` != `ld bc, (0000h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x4C] ).getInstruction(i).toAssembly;
    assert(asmStr == "mlt bc",  "`"~ asmStr ~ "` != `mlt bc`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x4D] ).getInstruction(i).toAssembly;
    assert(asmStr == "reti",  "`"~ asmStr ~ "` != `reti`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x4F] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld r, a",  "`"~ asmStr ~ "` != `ld r, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x50] ).getInstruction(i).toAssembly;
    assert(asmStr == "in d, (c)",  "`"~ asmStr ~ "` != `in d, (c)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x51] ).getInstruction(i).toAssembly;
    assert(asmStr == "out (c), d",  "`"~ asmStr ~ "` != `out (c), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x52] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc hl, de",  "`"~ asmStr ~ "` != `sbc hl, de`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x53, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (0000h), de",  "`"~ asmStr ~ "` != `ld (0000h), de`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x56] ).getInstruction(i).toAssembly;
    assert(asmStr == "im 1",  "`"~ asmStr ~ "` != `im 1`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x57] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, i",  "`"~ asmStr ~ "` != `ld a, i`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x58] ).getInstruction(i).toAssembly;
    assert(asmStr == "in e, (c)",  "`"~ asmStr ~ "` != `in e, (c)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x59] ).getInstruction(i).toAssembly;
    assert(asmStr == "out (c), e",  "`"~ asmStr ~ "` != `out (c), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x5A] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc hl, de",  "`"~ asmStr ~ "` != `adc hl, de`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x5B, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld de, (0000h)",  "`"~ asmStr ~ "` != `ld de, (0000h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x5C] ).getInstruction(i).toAssembly;
    assert(asmStr == "mlt de",  "`"~ asmStr ~ "` != `mlt de`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x5E] ).getInstruction(i).toAssembly;
    assert(asmStr == "im 2",  "`"~ asmStr ~ "` != `im 2`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x5F] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, r",  "`"~ asmStr ~ "` != `ld a, r`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x60] ).getInstruction(i).toAssembly;
    assert(asmStr == "in h, (c)",  "`"~ asmStr ~ "` != `in h, (c)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x61] ).getInstruction(i).toAssembly;
    assert(asmStr == "out (c), h",  "`"~ asmStr ~ "` != `out (c), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x62] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc hl, hl",  "`"~ asmStr ~ "` != `sbc hl, hl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x63, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (0000h), hl",  "`"~ asmStr ~ "` != `ld (0000h), hl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x64, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "tst 00h",  "`"~ asmStr ~ "` != `tst 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x67] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrd",  "`"~ asmStr ~ "` != `rrd`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x68] ).getInstruction(i).toAssembly;
    assert(asmStr == "in l, (c)",  "`"~ asmStr ~ "` != `in l, (c)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x69] ).getInstruction(i).toAssembly;
    assert(asmStr == "out (c), l",  "`"~ asmStr ~ "` != `out (c), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x6A] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc hl, hl",  "`"~ asmStr ~ "` != `adc hl, hl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x6B, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld hl, (0000h)",  "`"~ asmStr ~ "` != `ld hl, (0000h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x6C] ).getInstruction(i).toAssembly;
    assert(asmStr == "mlt hl",  "`"~ asmStr ~ "` != `mlt hl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x6F] ).getInstruction(i).toAssembly;
    assert(asmStr == "rld",  "`"~ asmStr ~ "` != `rld`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x70] ).getInstruction(i).toAssembly;
    assert(asmStr == "in (c)",  "`"~ asmStr ~ "` != `in (c)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x71] ).getInstruction(i).toAssembly;
    assert(asmStr == "out (c), 0",  "`"~ asmStr ~ "` != `out (c), 0`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x72] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc hl, sp",  "`"~ asmStr ~ "` != `sbc hl, sp`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x73, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (0000h), sp",  "`"~ asmStr ~ "` != `ld (0000h), sp`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x74, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "tstio 00h",  "`"~ asmStr ~ "` != `tstio 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x76] ).getInstruction(i).toAssembly;
    assert(asmStr == "slp",  "`"~ asmStr ~ "` != `slp`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x78] ).getInstruction(i).toAssembly;
    assert(asmStr == "in a, (c)",  "`"~ asmStr ~ "` != `in a, (c)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x79] ).getInstruction(i).toAssembly;
    assert(asmStr == "out (c), a",  "`"~ asmStr ~ "` != `out (c), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x7A] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc hl, sp",  "`"~ asmStr ~ "` != `adc hl, sp`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x7B, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld sp, (0000h)",  "`"~ asmStr ~ "` != `ld sp, (0000h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x7C] ).getInstruction(i).toAssembly;
    assert(asmStr == "mlt sp",  "`"~ asmStr ~ "` != `mlt sp`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x83] ).getInstruction(i).toAssembly;
    assert(asmStr == "otim",  "`"~ asmStr ~ "` != `otim`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x8B] ).getInstruction(i).toAssembly;
    assert(asmStr == "otdm",  "`"~ asmStr ~ "` != `otdm`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x93] ).getInstruction(i).toAssembly;
    assert(asmStr == "otimr",  "`"~ asmStr ~ "` != `otimr`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0x9B] ).getInstruction(i).toAssembly;
    assert(asmStr == "otdmr",  "`"~ asmStr ~ "` != `otdmr`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0xA0] ).getInstruction(i).toAssembly;
    assert(asmStr == "ldi",  "`"~ asmStr ~ "` != `ldi`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0xA1] ).getInstruction(i).toAssembly;
    assert(asmStr == "cpi",  "`"~ asmStr ~ "` != `cpi`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0xA2] ).getInstruction(i).toAssembly;
    assert(asmStr == "ini",  "`"~ asmStr ~ "` != `ini`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0xA3] ).getInstruction(i).toAssembly;
    assert(asmStr == "outi",  "`"~ asmStr ~ "` != `outi`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0xA8] ).getInstruction(i).toAssembly;
    assert(asmStr == "ldd",  "`"~ asmStr ~ "` != `ldd`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0xA9] ).getInstruction(i).toAssembly;
    assert(asmStr == "cpd",  "`"~ asmStr ~ "` != `cpd`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0xAA] ).getInstruction(i).toAssembly;
    assert(asmStr == "ind",  "`"~ asmStr ~ "` != `ind`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0xAB] ).getInstruction(i).toAssembly;
    assert(asmStr == "outd",  "`"~ asmStr ~ "` != `outd`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0xB0] ).getInstruction(i).toAssembly;
    assert(asmStr == "ldir",  "`"~ asmStr ~ "` != `ldir`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0xB1] ).getInstruction(i).toAssembly;
    assert(asmStr == "cpir",  "`"~ asmStr ~ "` != `cpir`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0xB2] ).getInstruction(i).toAssembly;
    assert(asmStr == "inir",  "`"~ asmStr ~ "` != `inir`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0xB3] ).getInstruction(i).toAssembly;
    assert(asmStr == "otir",  "`"~ asmStr ~ "` != `otir`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0xB8] ).getInstruction(i).toAssembly;
    assert(asmStr == "lddr",  "`"~ asmStr ~ "` != `lddr`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0xB9] ).getInstruction(i).toAssembly;
    assert(asmStr == "cpdr",  "`"~ asmStr ~ "` != `cpdr`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0xBA] ).getInstruction(i).toAssembly;
    assert(asmStr == "indr",  "`"~ asmStr ~ "` != `indr`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xED, 0xBB] ).getInstruction(i).toAssembly;
    assert(asmStr == "otdr",  "`"~ asmStr ~ "` != `otdr`");
}
unittest
{
    size_t i;
    string asmStr;
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x04] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc b",  "`"~ asmStr ~ "` != `inc b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x05] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec b",  "`"~ asmStr ~ "` != `dec b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x06, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, 00h",  "`"~ asmStr ~ "` != `ld b, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x09] ).getInstruction(i).toAssembly;
    assert(asmStr == "add ix, bc",  "`"~ asmStr ~ "` != `add ix, bc`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x0C] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc c",  "`"~ asmStr ~ "` != `inc c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x0D] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec c",  "`"~ asmStr ~ "` != `dec c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x0E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, 00h",  "`"~ asmStr ~ "` != `ld c, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x14] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc d",  "`"~ asmStr ~ "` != `inc d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x15] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec d",  "`"~ asmStr ~ "` != `dec d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x16, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, 00h",  "`"~ asmStr ~ "` != `ld d, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x19] ).getInstruction(i).toAssembly;
    assert(asmStr == "add ix, de",  "`"~ asmStr ~ "` != `add ix, de`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x1C] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc e",  "`"~ asmStr ~ "` != `inc e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x1D] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec e",  "`"~ asmStr ~ "` != `dec e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x1E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, 00h",  "`"~ asmStr ~ "` != `ld e, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x21, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld ix, 0000h",  "`"~ asmStr ~ "` != `ld ix, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x22, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (0000h), ix",  "`"~ asmStr ~ "` != `ld (0000h), ix`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x23] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc ix",  "`"~ asmStr ~ "` != `inc ix`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x24] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc ixh",  "`"~ asmStr ~ "` != `inc ixh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x25] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec ixh",  "`"~ asmStr ~ "` != `dec ixh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x26, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld ixh, 00h",  "`"~ asmStr ~ "` != `ld ixh, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x29] ).getInstruction(i).toAssembly;
    assert(asmStr == "add ix, ix",  "`"~ asmStr ~ "` != `add ix, ix`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x2A, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld ix, (0000h)",  "`"~ asmStr ~ "` != `ld ix, (0000h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x2B] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec ix",  "`"~ asmStr ~ "` != `dec ix`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x2C] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc ixl",  "`"~ asmStr ~ "` != `inc ixl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x2D] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec ixl",  "`"~ asmStr ~ "` != `dec ixl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x2E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld ixl, 00h",  "`"~ asmStr ~ "` != `ld ixl, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x34, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc (ix+00h)",  "`"~ asmStr ~ "` != `inc (ix+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x35, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec (ix+00h)",  "`"~ asmStr ~ "` != `dec (ix+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x36, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (ix+00h), 00h",  "`"~ asmStr ~ "` != `ld (ix+00h), 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x39] ).getInstruction(i).toAssembly;
    assert(asmStr == "add ix, sp",  "`"~ asmStr ~ "` != `add ix, sp`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x3C] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc a",  "`"~ asmStr ~ "` != `inc a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x3D] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec a",  "`"~ asmStr ~ "` != `dec a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x3E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, 00h",  "`"~ asmStr ~ "` != `ld a, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x40] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, b",  "`"~ asmStr ~ "` != `ld b, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x41] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, c",  "`"~ asmStr ~ "` != `ld b, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x42] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, d",  "`"~ asmStr ~ "` != `ld b, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x43] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, e",  "`"~ asmStr ~ "` != `ld b, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x44] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, ixh",  "`"~ asmStr ~ "` != `ld b, ixh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x45] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, ixl",  "`"~ asmStr ~ "` != `ld b, ixl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x46, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, (ix+00h)",  "`"~ asmStr ~ "` != `ld b, (ix+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x47] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, a",  "`"~ asmStr ~ "` != `ld b, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x48] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, b",  "`"~ asmStr ~ "` != `ld c, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x49] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, c",  "`"~ asmStr ~ "` != `ld c, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x4A] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, d",  "`"~ asmStr ~ "` != `ld c, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x4B] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, e",  "`"~ asmStr ~ "` != `ld c, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x4C] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, ixh",  "`"~ asmStr ~ "` != `ld c, ixh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x4D] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, ixl",  "`"~ asmStr ~ "` != `ld c, ixl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x4E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, (ix+00h)",  "`"~ asmStr ~ "` != `ld c, (ix+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x4F] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, a",  "`"~ asmStr ~ "` != `ld c, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x50] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, b",  "`"~ asmStr ~ "` != `ld d, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x51] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, c",  "`"~ asmStr ~ "` != `ld d, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x52] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, d",  "`"~ asmStr ~ "` != `ld d, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x53] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, e",  "`"~ asmStr ~ "` != `ld d, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x54] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, ixh",  "`"~ asmStr ~ "` != `ld d, ixh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x55] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, ixl",  "`"~ asmStr ~ "` != `ld d, ixl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x56, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, (ix+00h)",  "`"~ asmStr ~ "` != `ld d, (ix+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x57] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, a",  "`"~ asmStr ~ "` != `ld d, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x58] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, b",  "`"~ asmStr ~ "` != `ld e, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x59] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, c",  "`"~ asmStr ~ "` != `ld e, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x5A] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, d",  "`"~ asmStr ~ "` != `ld e, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x5B] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, e",  "`"~ asmStr ~ "` != `ld e, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x5C] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, ixh",  "`"~ asmStr ~ "` != `ld e, ixh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x5D] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, ixl",  "`"~ asmStr ~ "` != `ld e, ixl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x5E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, (ix+00h)",  "`"~ asmStr ~ "` != `ld e, (ix+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x5F] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, a",  "`"~ asmStr ~ "` != `ld e, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x60] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld ixh, b",  "`"~ asmStr ~ "` != `ld ixh, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x61] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld ixh, c",  "`"~ asmStr ~ "` != `ld ixh, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x62] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld ixh, d",  "`"~ asmStr ~ "` != `ld ixh, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x63] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld ixh, e",  "`"~ asmStr ~ "` != `ld ixh, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x64] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld ixh, ixh",  "`"~ asmStr ~ "` != `ld ixh, ixh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x65] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld ixh, ixl",  "`"~ asmStr ~ "` != `ld ixh, ixl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x66, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld h, (ix+00h)",  "`"~ asmStr ~ "` != `ld h, (ix+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x67] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld ixh, a",  "`"~ asmStr ~ "` != `ld ixh, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x68] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld ixl, b",  "`"~ asmStr ~ "` != `ld ixl, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x69] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld ixl, c",  "`"~ asmStr ~ "` != `ld ixl, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x6A] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld ixl, d",  "`"~ asmStr ~ "` != `ld ixl, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x6B] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld ixl, e",  "`"~ asmStr ~ "` != `ld ixl, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x6C] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld ixl, ixh",  "`"~ asmStr ~ "` != `ld ixl, ixh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x6D] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld ixl, ixl",  "`"~ asmStr ~ "` != `ld ixl, ixl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x6E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld l, (ix+00h)",  "`"~ asmStr ~ "` != `ld l, (ix+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x6F] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld ixl, a",  "`"~ asmStr ~ "` != `ld ixl, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x70, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (ix+00h), b",  "`"~ asmStr ~ "` != `ld (ix+00h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x71, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (ix+00h), c",  "`"~ asmStr ~ "` != `ld (ix+00h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x72, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (ix+00h), d",  "`"~ asmStr ~ "` != `ld (ix+00h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x73, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (ix+00h), e",  "`"~ asmStr ~ "` != `ld (ix+00h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x74, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (ix+00h), h",  "`"~ asmStr ~ "` != `ld (ix+00h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x75, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (ix+00h), l",  "`"~ asmStr ~ "` != `ld (ix+00h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x77, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (ix+00h), a",  "`"~ asmStr ~ "` != `ld (ix+00h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x78] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, b",  "`"~ asmStr ~ "` != `ld a, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x79] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, c",  "`"~ asmStr ~ "` != `ld a, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x7A] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, d",  "`"~ asmStr ~ "` != `ld a, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x7B] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, e",  "`"~ asmStr ~ "` != `ld a, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x7C] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, ixh",  "`"~ asmStr ~ "` != `ld a, ixh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x7D] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, ixl",  "`"~ asmStr ~ "` != `ld a, ixl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x7E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, (ix+00h)",  "`"~ asmStr ~ "` != `ld a, (ix+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x7F] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, a",  "`"~ asmStr ~ "` != `ld a, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x80] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, b",  "`"~ asmStr ~ "` != `add a, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x81] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, c",  "`"~ asmStr ~ "` != `add a, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x82] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, d",  "`"~ asmStr ~ "` != `add a, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x83] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, e",  "`"~ asmStr ~ "` != `add a, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x84] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, ixh",  "`"~ asmStr ~ "` != `add a, ixh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x85] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, ixl",  "`"~ asmStr ~ "` != `add a, ixl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x86, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, (ix+00h)",  "`"~ asmStr ~ "` != `add a, (ix+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x87] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, a",  "`"~ asmStr ~ "` != `add a, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x88] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, b",  "`"~ asmStr ~ "` != `adc a, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x89] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, c",  "`"~ asmStr ~ "` != `adc a, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x8A] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, d",  "`"~ asmStr ~ "` != `adc a, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x8B] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, e",  "`"~ asmStr ~ "` != `adc a, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x8C] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, ixh",  "`"~ asmStr ~ "` != `adc a, ixh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x8D] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, ixl",  "`"~ asmStr ~ "` != `adc a, ixl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x8E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, (ix+00h)",  "`"~ asmStr ~ "` != `adc a, (ix+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x8F] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, a",  "`"~ asmStr ~ "` != `adc a, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x90] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub b",  "`"~ asmStr ~ "` != `sub b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x91] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub c",  "`"~ asmStr ~ "` != `sub c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x92] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub d",  "`"~ asmStr ~ "` != `sub d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x93] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub e",  "`"~ asmStr ~ "` != `sub e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x94] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub ixh",  "`"~ asmStr ~ "` != `sub ixh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x95] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub ixl",  "`"~ asmStr ~ "` != `sub ixl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x96, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub (ix+00h)",  "`"~ asmStr ~ "` != `sub (ix+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x97] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub a",  "`"~ asmStr ~ "` != `sub a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x98] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, b",  "`"~ asmStr ~ "` != `sbc a, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x99] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, c",  "`"~ asmStr ~ "` != `sbc a, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x9A] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, d",  "`"~ asmStr ~ "` != `sbc a, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x9B] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, e",  "`"~ asmStr ~ "` != `sbc a, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x9C] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, ixh",  "`"~ asmStr ~ "` != `sbc a, ixh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x9D] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, ixl",  "`"~ asmStr ~ "` != `sbc a, ixl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x9E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, (ix+00h)",  "`"~ asmStr ~ "` != `sbc a, (ix+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0x9F] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, a",  "`"~ asmStr ~ "` != `sbc a, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xA0] ).getInstruction(i).toAssembly;
    assert(asmStr == "and b",  "`"~ asmStr ~ "` != `and b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xA1] ).getInstruction(i).toAssembly;
    assert(asmStr == "and c",  "`"~ asmStr ~ "` != `and c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xA2] ).getInstruction(i).toAssembly;
    assert(asmStr == "and d",  "`"~ asmStr ~ "` != `and d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xA3] ).getInstruction(i).toAssembly;
    assert(asmStr == "and e",  "`"~ asmStr ~ "` != `and e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xA4] ).getInstruction(i).toAssembly;
    assert(asmStr == "and ixh",  "`"~ asmStr ~ "` != `and ixh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xA5] ).getInstruction(i).toAssembly;
    assert(asmStr == "and ixl",  "`"~ asmStr ~ "` != `and ixl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xA6, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "and (ix+00h)",  "`"~ asmStr ~ "` != `and (ix+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xA7] ).getInstruction(i).toAssembly;
    assert(asmStr == "and a",  "`"~ asmStr ~ "` != `and a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xA8] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor b",  "`"~ asmStr ~ "` != `xor b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xA9] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor c",  "`"~ asmStr ~ "` != `xor c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xAA] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor d",  "`"~ asmStr ~ "` != `xor d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xAB] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor e",  "`"~ asmStr ~ "` != `xor e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xAC] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor ixh",  "`"~ asmStr ~ "` != `xor ixh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xAD] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor ixl",  "`"~ asmStr ~ "` != `xor ixl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xAE, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor (ix+00h)",  "`"~ asmStr ~ "` != `xor (ix+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xAF] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor a",  "`"~ asmStr ~ "` != `xor a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xB0] ).getInstruction(i).toAssembly;
    assert(asmStr == "or b",  "`"~ asmStr ~ "` != `or b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xB1] ).getInstruction(i).toAssembly;
    assert(asmStr == "or c",  "`"~ asmStr ~ "` != `or c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xB2] ).getInstruction(i).toAssembly;
    assert(asmStr == "or d",  "`"~ asmStr ~ "` != `or d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xB3] ).getInstruction(i).toAssembly;
    assert(asmStr == "or e",  "`"~ asmStr ~ "` != `or e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xB4] ).getInstruction(i).toAssembly;
    assert(asmStr == "or ixh",  "`"~ asmStr ~ "` != `or ixh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xB5] ).getInstruction(i).toAssembly;
    assert(asmStr == "or ixl",  "`"~ asmStr ~ "` != `or ixl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xB6, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "or (ix+00h)",  "`"~ asmStr ~ "` != `or (ix+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xB7] ).getInstruction(i).toAssembly;
    assert(asmStr == "or a",  "`"~ asmStr ~ "` != `or a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xB8] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp b",  "`"~ asmStr ~ "` != `cp b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xB9] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp c",  "`"~ asmStr ~ "` != `cp c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xBA] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp d",  "`"~ asmStr ~ "` != `cp d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xBB] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp e",  "`"~ asmStr ~ "` != `cp e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xBC] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp ixh",  "`"~ asmStr ~ "` != `cp ixh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xBD] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp ixl",  "`"~ asmStr ~ "` != `cp ixl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xBE, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp (ix+00h)",  "`"~ asmStr ~ "` != `cp (ix+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xBF] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp a",  "`"~ asmStr ~ "` != `cp a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xE1] ).getInstruction(i).toAssembly;
    assert(asmStr == "pop ix",  "`"~ asmStr ~ "` != `pop ix`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xE3] ).getInstruction(i).toAssembly;
    assert(asmStr == "ex (sp), ix",  "`"~ asmStr ~ "` != `ex (sp), ix`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xE5] ).getInstruction(i).toAssembly;
    assert(asmStr == "push ix",  "`"~ asmStr ~ "` != `push ix`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xE9] ).getInstruction(i).toAssembly;
    assert(asmStr == "jp (ix)",  "`"~ asmStr ~ "` != `jp (ix)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xF9] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld sp, ix",  "`"~ asmStr ~ "` != `ld sp, ix`");
}
unittest
{
    size_t i;
    string asmStr;
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x04] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc b",  "`"~ asmStr ~ "` != `inc b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x05] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec b",  "`"~ asmStr ~ "` != `dec b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x06, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, 00h",  "`"~ asmStr ~ "` != `ld b, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x09] ).getInstruction(i).toAssembly;
    assert(asmStr == "add iy, bc",  "`"~ asmStr ~ "` != `add iy, bc`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x0C] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc c",  "`"~ asmStr ~ "` != `inc c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x0D] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec c",  "`"~ asmStr ~ "` != `dec c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x0E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, 00h",  "`"~ asmStr ~ "` != `ld c, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x14] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc d",  "`"~ asmStr ~ "` != `inc d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x15] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec d",  "`"~ asmStr ~ "` != `dec d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x16, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, 00h",  "`"~ asmStr ~ "` != `ld d, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x19] ).getInstruction(i).toAssembly;
    assert(asmStr == "add iy, de",  "`"~ asmStr ~ "` != `add iy, de`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x1C] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc e",  "`"~ asmStr ~ "` != `inc e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x1D] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec e",  "`"~ asmStr ~ "` != `dec e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x1E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, 00h",  "`"~ asmStr ~ "` != `ld e, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x21, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld iy, 0000h",  "`"~ asmStr ~ "` != `ld iy, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x22, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (0000h), iy",  "`"~ asmStr ~ "` != `ld (0000h), iy`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x23] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc iy",  "`"~ asmStr ~ "` != `inc iy`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x24] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc iyh",  "`"~ asmStr ~ "` != `inc iyh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x25] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec iyh",  "`"~ asmStr ~ "` != `dec iyh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x26, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld iyh, 00h",  "`"~ asmStr ~ "` != `ld iyh, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x29] ).getInstruction(i).toAssembly;
    assert(asmStr == "add iy, iy",  "`"~ asmStr ~ "` != `add iy, iy`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x2A, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld iy, (0000h)",  "`"~ asmStr ~ "` != `ld iy, (0000h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x2B] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec iy",  "`"~ asmStr ~ "` != `dec iy`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x2C] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc iyl",  "`"~ asmStr ~ "` != `inc iyl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x2D] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec iyl",  "`"~ asmStr ~ "` != `dec iyl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x2E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld iyl, 00h",  "`"~ asmStr ~ "` != `ld iyl, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x34, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc (iy+00h)",  "`"~ asmStr ~ "` != `inc (iy+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x35, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec (iy+00h)",  "`"~ asmStr ~ "` != `dec (iy+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x36, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (iy+00h), 00h",  "`"~ asmStr ~ "` != `ld (iy+00h), 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x39] ).getInstruction(i).toAssembly;
    assert(asmStr == "add iy, sp",  "`"~ asmStr ~ "` != `add iy, sp`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x3C] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc a",  "`"~ asmStr ~ "` != `inc a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x3D] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec a",  "`"~ asmStr ~ "` != `dec a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x3E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, 00h",  "`"~ asmStr ~ "` != `ld a, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x40] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, b",  "`"~ asmStr ~ "` != `ld b, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x41] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, c",  "`"~ asmStr ~ "` != `ld b, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x42] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, d",  "`"~ asmStr ~ "` != `ld b, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x43] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, e",  "`"~ asmStr ~ "` != `ld b, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x44] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, iyh",  "`"~ asmStr ~ "` != `ld b, iyh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x45] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, iyl",  "`"~ asmStr ~ "` != `ld b, iyl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x46, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, (iy+00h)",  "`"~ asmStr ~ "` != `ld b, (iy+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x47] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, a",  "`"~ asmStr ~ "` != `ld b, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x48] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, b",  "`"~ asmStr ~ "` != `ld c, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x49] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, c",  "`"~ asmStr ~ "` != `ld c, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x4A] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, d",  "`"~ asmStr ~ "` != `ld c, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x4B] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, e",  "`"~ asmStr ~ "` != `ld c, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x4C] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, iyh",  "`"~ asmStr ~ "` != `ld c, iyh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x4D] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, iyl",  "`"~ asmStr ~ "` != `ld c, iyl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x4E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, (iy+00h)",  "`"~ asmStr ~ "` != `ld c, (iy+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x4F] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, a",  "`"~ asmStr ~ "` != `ld c, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x50] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, b",  "`"~ asmStr ~ "` != `ld d, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x51] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, c",  "`"~ asmStr ~ "` != `ld d, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x52] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, d",  "`"~ asmStr ~ "` != `ld d, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x53] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, e",  "`"~ asmStr ~ "` != `ld d, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x54] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, iyh",  "`"~ asmStr ~ "` != `ld d, iyh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x55] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, iyl",  "`"~ asmStr ~ "` != `ld d, iyl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x56, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, (iy+00h)",  "`"~ asmStr ~ "` != `ld d, (iy+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x57] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, a",  "`"~ asmStr ~ "` != `ld d, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x58] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, b",  "`"~ asmStr ~ "` != `ld e, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x59] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, c",  "`"~ asmStr ~ "` != `ld e, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x5A] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, d",  "`"~ asmStr ~ "` != `ld e, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x5B] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, e",  "`"~ asmStr ~ "` != `ld e, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x5C] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, iyh",  "`"~ asmStr ~ "` != `ld e, iyh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x5D] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, iyl",  "`"~ asmStr ~ "` != `ld e, iyl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x5E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, (iy+00h)",  "`"~ asmStr ~ "` != `ld e, (iy+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x5F] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, a",  "`"~ asmStr ~ "` != `ld e, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x60] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld iyh, b",  "`"~ asmStr ~ "` != `ld iyh, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x61] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld iyh, c",  "`"~ asmStr ~ "` != `ld iyh, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x62] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld iyh, d",  "`"~ asmStr ~ "` != `ld iyh, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x63] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld iyh, e",  "`"~ asmStr ~ "` != `ld iyh, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x64] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld iyh, iyh",  "`"~ asmStr ~ "` != `ld iyh, iyh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x65] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld iyh, iyl",  "`"~ asmStr ~ "` != `ld iyh, iyl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x66, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld h, (iy+00h)",  "`"~ asmStr ~ "` != `ld h, (iy+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x67] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld iyh, a",  "`"~ asmStr ~ "` != `ld iyh, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x68] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld iyl, b",  "`"~ asmStr ~ "` != `ld iyl, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x69] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld iyl, c",  "`"~ asmStr ~ "` != `ld iyl, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x6A] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld iyl, d",  "`"~ asmStr ~ "` != `ld iyl, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x6B] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld iyl, e",  "`"~ asmStr ~ "` != `ld iyl, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x6C] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld iyl, iyh",  "`"~ asmStr ~ "` != `ld iyl, iyh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x6D] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld iyl, iyl",  "`"~ asmStr ~ "` != `ld iyl, iyl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x6E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld l, (iy+00h)",  "`"~ asmStr ~ "` != `ld l, (iy+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x6F] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld iyl, a",  "`"~ asmStr ~ "` != `ld iyl, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x70, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (iy+00h), b",  "`"~ asmStr ~ "` != `ld (iy+00h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x71, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (iy+00h), c",  "`"~ asmStr ~ "` != `ld (iy+00h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x72, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (iy+00h), d",  "`"~ asmStr ~ "` != `ld (iy+00h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x73, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (iy+00h), e",  "`"~ asmStr ~ "` != `ld (iy+00h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x74, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (iy+00h), h",  "`"~ asmStr ~ "` != `ld (iy+00h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x75, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (iy+00h), l",  "`"~ asmStr ~ "` != `ld (iy+00h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x77, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (iy+00h), a",  "`"~ asmStr ~ "` != `ld (iy+00h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x78] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, b",  "`"~ asmStr ~ "` != `ld a, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x79] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, c",  "`"~ asmStr ~ "` != `ld a, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x7A] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, d",  "`"~ asmStr ~ "` != `ld a, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x7B] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, e",  "`"~ asmStr ~ "` != `ld a, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x7C] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, iyh",  "`"~ asmStr ~ "` != `ld a, iyh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x7D] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, iyl",  "`"~ asmStr ~ "` != `ld a, iyl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x7E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, (iy+00h)",  "`"~ asmStr ~ "` != `ld a, (iy+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x7F] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, a",  "`"~ asmStr ~ "` != `ld a, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x80] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, b",  "`"~ asmStr ~ "` != `add a, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x81] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, c",  "`"~ asmStr ~ "` != `add a, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x82] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, d",  "`"~ asmStr ~ "` != `add a, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x83] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, e",  "`"~ asmStr ~ "` != `add a, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x84] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, iyh",  "`"~ asmStr ~ "` != `add a, iyh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x85] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, iyl",  "`"~ asmStr ~ "` != `add a, iyl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x86, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, (iy+00h)",  "`"~ asmStr ~ "` != `add a, (iy+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x87] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, a",  "`"~ asmStr ~ "` != `add a, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x88] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, b",  "`"~ asmStr ~ "` != `adc a, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x89] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, c",  "`"~ asmStr ~ "` != `adc a, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x8A] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, d",  "`"~ asmStr ~ "` != `adc a, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x8B] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, e",  "`"~ asmStr ~ "` != `adc a, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x8C] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, iyh",  "`"~ asmStr ~ "` != `adc a, iyh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x8D] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, iyl",  "`"~ asmStr ~ "` != `adc a, iyl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x8E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, (iy+00h)",  "`"~ asmStr ~ "` != `adc a, (iy+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x8F] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, a",  "`"~ asmStr ~ "` != `adc a, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x90] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub b",  "`"~ asmStr ~ "` != `sub b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x91] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub c",  "`"~ asmStr ~ "` != `sub c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x92] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub d",  "`"~ asmStr ~ "` != `sub d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x93] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub e",  "`"~ asmStr ~ "` != `sub e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x94] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub iyh",  "`"~ asmStr ~ "` != `sub iyh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x95] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub iyl",  "`"~ asmStr ~ "` != `sub iyl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x96, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub (iy+00h)",  "`"~ asmStr ~ "` != `sub (iy+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x97] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub a",  "`"~ asmStr ~ "` != `sub a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x98] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, b",  "`"~ asmStr ~ "` != `sbc a, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x99] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, c",  "`"~ asmStr ~ "` != `sbc a, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x9A] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, d",  "`"~ asmStr ~ "` != `sbc a, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x9B] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, e",  "`"~ asmStr ~ "` != `sbc a, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x9C] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, iyh",  "`"~ asmStr ~ "` != `sbc a, iyh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x9D] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, iyl",  "`"~ asmStr ~ "` != `sbc a, iyl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x9E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, (iy+00h)",  "`"~ asmStr ~ "` != `sbc a, (iy+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0x9F] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, a",  "`"~ asmStr ~ "` != `sbc a, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xA0] ).getInstruction(i).toAssembly;
    assert(asmStr == "and b",  "`"~ asmStr ~ "` != `and b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xA1] ).getInstruction(i).toAssembly;
    assert(asmStr == "and c",  "`"~ asmStr ~ "` != `and c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xA2] ).getInstruction(i).toAssembly;
    assert(asmStr == "and d",  "`"~ asmStr ~ "` != `and d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xA3] ).getInstruction(i).toAssembly;
    assert(asmStr == "and e",  "`"~ asmStr ~ "` != `and e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xA4] ).getInstruction(i).toAssembly;
    assert(asmStr == "and iyh",  "`"~ asmStr ~ "` != `and iyh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xA5] ).getInstruction(i).toAssembly;
    assert(asmStr == "and iyl",  "`"~ asmStr ~ "` != `and iyl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xA6, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "and (iy+00h)",  "`"~ asmStr ~ "` != `and (iy+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xA7] ).getInstruction(i).toAssembly;
    assert(asmStr == "and a",  "`"~ asmStr ~ "` != `and a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xA8] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor b",  "`"~ asmStr ~ "` != `xor b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xA9] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor c",  "`"~ asmStr ~ "` != `xor c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xAA] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor d",  "`"~ asmStr ~ "` != `xor d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xAB] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor e",  "`"~ asmStr ~ "` != `xor e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xAC] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor iyh",  "`"~ asmStr ~ "` != `xor iyh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xAD] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor iyl",  "`"~ asmStr ~ "` != `xor iyl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xAE, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor (iy+00h)",  "`"~ asmStr ~ "` != `xor (iy+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xAF] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor a",  "`"~ asmStr ~ "` != `xor a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xB0] ).getInstruction(i).toAssembly;
    assert(asmStr == "or b",  "`"~ asmStr ~ "` != `or b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xB1] ).getInstruction(i).toAssembly;
    assert(asmStr == "or c",  "`"~ asmStr ~ "` != `or c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xB2] ).getInstruction(i).toAssembly;
    assert(asmStr == "or d",  "`"~ asmStr ~ "` != `or d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xB3] ).getInstruction(i).toAssembly;
    assert(asmStr == "or e",  "`"~ asmStr ~ "` != `or e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xB4] ).getInstruction(i).toAssembly;
    assert(asmStr == "or iyh",  "`"~ asmStr ~ "` != `or iyh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xB5] ).getInstruction(i).toAssembly;
    assert(asmStr == "or iyl",  "`"~ asmStr ~ "` != `or iyl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xB6, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "or (iy+00h)",  "`"~ asmStr ~ "` != `or (iy+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xB7] ).getInstruction(i).toAssembly;
    assert(asmStr == "or a",  "`"~ asmStr ~ "` != `or a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xB8] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp b",  "`"~ asmStr ~ "` != `cp b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xB9] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp c",  "`"~ asmStr ~ "` != `cp c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xBA] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp d",  "`"~ asmStr ~ "` != `cp d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xBB] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp e",  "`"~ asmStr ~ "` != `cp e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xBC] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp iyh",  "`"~ asmStr ~ "` != `cp iyh`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xBD] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp iyl",  "`"~ asmStr ~ "` != `cp iyl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xBE, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp (iy+00h)",  "`"~ asmStr ~ "` != `cp (iy+00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xBF] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp a",  "`"~ asmStr ~ "` != `cp a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xE1] ).getInstruction(i).toAssembly;
    assert(asmStr == "pop iy",  "`"~ asmStr ~ "` != `pop iy`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xE3] ).getInstruction(i).toAssembly;
    assert(asmStr == "ex (sp), iy",  "`"~ asmStr ~ "` != `ex (sp), iy`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xE5] ).getInstruction(i).toAssembly;
    assert(asmStr == "push iy",  "`"~ asmStr ~ "` != `push iy`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xE9] ).getInstruction(i).toAssembly;
    assert(asmStr == "jp (iy)",  "`"~ asmStr ~ "` != `jp (iy)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xF9] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld sp, iy",  "`"~ asmStr ~ "` != `ld sp, iy`");
}
unittest
{
   size_t i;
    string asmStr;
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc (ix+01h), b",  "`"~ asmStr ~ "` != `rlc (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x01] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc (ix+01h), c",  "`"~ asmStr ~ "` != `rlc (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x02] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc (ix+01h), d",  "`"~ asmStr ~ "` != `rlc (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x03] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc (ix+01h), e",  "`"~ asmStr ~ "` != `rlc (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x04] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc (ix+01h), h",  "`"~ asmStr ~ "` != `rlc (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x05] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc (ix+01h), l",  "`"~ asmStr ~ "` != `rlc (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x06] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc (ix+01h)",  "`"~ asmStr ~ "` != `rlc (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x07] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc (ix+01h), a",  "`"~ asmStr ~ "` != `rlc (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x08] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc (ix+01h), b",  "`"~ asmStr ~ "` != `rrc (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x09] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc (ix+01h), c",  "`"~ asmStr ~ "` != `rrc (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x0A] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc (ix+01h), d",  "`"~ asmStr ~ "` != `rrc (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x0B] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc (ix+01h), e",  "`"~ asmStr ~ "` != `rrc (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x0C] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc (ix+01h), h",  "`"~ asmStr ~ "` != `rrc (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x0D] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc (ix+01h), l",  "`"~ asmStr ~ "` != `rrc (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x0E] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc (ix+01h)",  "`"~ asmStr ~ "` != `rrc (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x0F] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc (ix+01h), a",  "`"~ asmStr ~ "` != `rrc (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x10] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl (ix+01h), b",  "`"~ asmStr ~ "` != `rl (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x11] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl (ix+01h), c",  "`"~ asmStr ~ "` != `rl (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x12] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl (ix+01h), d",  "`"~ asmStr ~ "` != `rl (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x13] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl (ix+01h), e",  "`"~ asmStr ~ "` != `rl (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x14] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl (ix+01h), h",  "`"~ asmStr ~ "` != `rl (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x15] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl (ix+01h), l",  "`"~ asmStr ~ "` != `rl (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x16] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl (ix+01h)",  "`"~ asmStr ~ "` != `rl (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x17] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl (ix+01h), a",  "`"~ asmStr ~ "` != `rl (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x18] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr (ix+01h), b",  "`"~ asmStr ~ "` != `rr (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x19] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr (ix+01h), c",  "`"~ asmStr ~ "` != `rr (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x1A] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr (ix+01h), d",  "`"~ asmStr ~ "` != `rr (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x1B] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr (ix+01h), e",  "`"~ asmStr ~ "` != `rr (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x1C] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr (ix+01h), h",  "`"~ asmStr ~ "` != `rr (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x1D] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr (ix+01h), l",  "`"~ asmStr ~ "` != `rr (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x1E] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr (ix+01h)",  "`"~ asmStr ~ "` != `rr (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x1F] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr (ix+01h), a",  "`"~ asmStr ~ "` != `rr (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x20] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla (ix+01h), b",  "`"~ asmStr ~ "` != `sla (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x21] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla (ix+01h), c",  "`"~ asmStr ~ "` != `sla (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x22] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla (ix+01h), d",  "`"~ asmStr ~ "` != `sla (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x23] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla (ix+01h), e",  "`"~ asmStr ~ "` != `sla (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x24] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla (ix+01h), h",  "`"~ asmStr ~ "` != `sla (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x25] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla (ix+01h), l",  "`"~ asmStr ~ "` != `sla (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x26] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla (ix+01h)",  "`"~ asmStr ~ "` != `sla (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x27] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla (ix+01h), a",  "`"~ asmStr ~ "` != `sla (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x28] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra (ix+01h), b",  "`"~ asmStr ~ "` != `sra (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x29] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra (ix+01h), c",  "`"~ asmStr ~ "` != `sra (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x2A] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra (ix+01h), d",  "`"~ asmStr ~ "` != `sra (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x2B] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra (ix+01h), e",  "`"~ asmStr ~ "` != `sra (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x2C] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra (ix+01h), h",  "`"~ asmStr ~ "` != `sra (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x2D] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra (ix+01h), l",  "`"~ asmStr ~ "` != `sra (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x2E] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra (ix+01h)",  "`"~ asmStr ~ "` != `sra (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x2F] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra (ix+01h), a",  "`"~ asmStr ~ "` != `sra (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x30] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll (ix+01h), b",  "`"~ asmStr ~ "` != `sll (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x31] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll (ix+01h), c",  "`"~ asmStr ~ "` != `sll (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x32] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll (ix+01h), d",  "`"~ asmStr ~ "` != `sll (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x33] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll (ix+01h), e",  "`"~ asmStr ~ "` != `sll (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x34] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll (ix+01h), h",  "`"~ asmStr ~ "` != `sll (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x35] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll (ix+01h), l",  "`"~ asmStr ~ "` != `sll (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x36] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll (ix+01h)",  "`"~ asmStr ~ "` != `sll (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x37] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll (ix+01h), a",  "`"~ asmStr ~ "` != `sll (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x38] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl (ix+01h), b",  "`"~ asmStr ~ "` != `srl (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x39] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl (ix+01h), c",  "`"~ asmStr ~ "` != `srl (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x3A] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl (ix+01h), d",  "`"~ asmStr ~ "` != `srl (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x3B] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl (ix+01h), e",  "`"~ asmStr ~ "` != `srl (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x3C] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl (ix+01h), h",  "`"~ asmStr ~ "` != `srl (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x3D] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl (ix+01h), l",  "`"~ asmStr ~ "` != `srl (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x3E] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl (ix+01h)",  "`"~ asmStr ~ "` != `srl (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x3F] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl (ix+01h), a",  "`"~ asmStr ~ "` != `srl (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x40] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, (ix+01h)",  "`"~ asmStr ~ "` != `bit 0, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x41] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, (ix+01h)",  "`"~ asmStr ~ "` != `bit 0, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x42] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, (ix+01h)",  "`"~ asmStr ~ "` != `bit 0, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x43] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, (ix+01h)",  "`"~ asmStr ~ "` != `bit 0, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x44] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, (ix+01h)",  "`"~ asmStr ~ "` != `bit 0, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x45] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, (ix+01h)",  "`"~ asmStr ~ "` != `bit 0, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x46] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, (ix+01h)",  "`"~ asmStr ~ "` != `bit 0, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x47] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, (ix+01h)",  "`"~ asmStr ~ "` != `bit 0, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x48] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, (ix+01h)",  "`"~ asmStr ~ "` != `bit 1, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x49] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, (ix+01h)",  "`"~ asmStr ~ "` != `bit 1, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x4A] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, (ix+01h)",  "`"~ asmStr ~ "` != `bit 1, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x4B] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, (ix+01h)",  "`"~ asmStr ~ "` != `bit 1, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x4C] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, (ix+01h)",  "`"~ asmStr ~ "` != `bit 1, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x4D] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, (ix+01h)",  "`"~ asmStr ~ "` != `bit 1, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x4E] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, (ix+01h)",  "`"~ asmStr ~ "` != `bit 1, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x4F] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, (ix+01h)",  "`"~ asmStr ~ "` != `bit 1, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x50] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, (ix+01h)",  "`"~ asmStr ~ "` != `bit 2, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x51] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, (ix+01h)",  "`"~ asmStr ~ "` != `bit 2, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x52] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, (ix+01h)",  "`"~ asmStr ~ "` != `bit 2, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x53] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, (ix+01h)",  "`"~ asmStr ~ "` != `bit 2, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x54] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, (ix+01h)",  "`"~ asmStr ~ "` != `bit 2, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x55] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, (ix+01h)",  "`"~ asmStr ~ "` != `bit 2, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x56] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, (ix+01h)",  "`"~ asmStr ~ "` != `bit 2, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x57] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, (ix+01h)",  "`"~ asmStr ~ "` != `bit 2, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x58] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, (ix+01h)",  "`"~ asmStr ~ "` != `bit 3, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x59] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, (ix+01h)",  "`"~ asmStr ~ "` != `bit 3, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x5A] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, (ix+01h)",  "`"~ asmStr ~ "` != `bit 3, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x5B] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, (ix+01h)",  "`"~ asmStr ~ "` != `bit 3, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x5C] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, (ix+01h)",  "`"~ asmStr ~ "` != `bit 3, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x5D] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, (ix+01h)",  "`"~ asmStr ~ "` != `bit 3, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x5E] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, (ix+01h)",  "`"~ asmStr ~ "` != `bit 3, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x5F] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, (ix+01h)",  "`"~ asmStr ~ "` != `bit 3, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x60] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, (ix+01h)",  "`"~ asmStr ~ "` != `bit 4, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x61] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, (ix+01h)",  "`"~ asmStr ~ "` != `bit 4, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x62] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, (ix+01h)",  "`"~ asmStr ~ "` != `bit 4, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x63] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, (ix+01h)",  "`"~ asmStr ~ "` != `bit 4, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x64] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, (ix+01h)",  "`"~ asmStr ~ "` != `bit 4, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x65] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, (ix+01h)",  "`"~ asmStr ~ "` != `bit 4, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x66] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, (ix+01h)",  "`"~ asmStr ~ "` != `bit 4, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x67] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, (ix+01h)",  "`"~ asmStr ~ "` != `bit 4, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x68] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, (ix+01h)",  "`"~ asmStr ~ "` != `bit 5, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x69] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, (ix+01h)",  "`"~ asmStr ~ "` != `bit 5, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x6A] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, (ix+01h)",  "`"~ asmStr ~ "` != `bit 5, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x6B] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, (ix+01h)",  "`"~ asmStr ~ "` != `bit 5, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x6C] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, (ix+01h)",  "`"~ asmStr ~ "` != `bit 5, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x6D] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, (ix+01h)",  "`"~ asmStr ~ "` != `bit 5, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x6E] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, (ix+01h)",  "`"~ asmStr ~ "` != `bit 5, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x6F] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, (ix+01h)",  "`"~ asmStr ~ "` != `bit 5, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x70] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, (ix+01h)",  "`"~ asmStr ~ "` != `bit 6, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x71] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, (ix+01h)",  "`"~ asmStr ~ "` != `bit 6, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x72] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, (ix+01h)",  "`"~ asmStr ~ "` != `bit 6, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x73] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, (ix+01h)",  "`"~ asmStr ~ "` != `bit 6, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x74] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, (ix+01h)",  "`"~ asmStr ~ "` != `bit 6, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x75] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, (ix+01h)",  "`"~ asmStr ~ "` != `bit 6, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x76] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, (ix+01h)",  "`"~ asmStr ~ "` != `bit 6, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x77] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, (ix+01h)",  "`"~ asmStr ~ "` != `bit 6, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x78] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, (ix+01h)",  "`"~ asmStr ~ "` != `bit 7, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x79] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, (ix+01h)",  "`"~ asmStr ~ "` != `bit 7, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x7A] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, (ix+01h)",  "`"~ asmStr ~ "` != `bit 7, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x7B] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, (ix+01h)",  "`"~ asmStr ~ "` != `bit 7, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x7C] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, (ix+01h)",  "`"~ asmStr ~ "` != `bit 7, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x7D] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, (ix+01h)",  "`"~ asmStr ~ "` != `bit 7, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x7E] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, (ix+01h)",  "`"~ asmStr ~ "` != `bit 7, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x7F] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, (ix+01h)",  "`"~ asmStr ~ "` != `bit 7, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x80] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, (ix+01h), b",  "`"~ asmStr ~ "` != `res 0, (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x81] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, (ix+01h), c",  "`"~ asmStr ~ "` != `res 0, (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x82] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, (ix+01h), d",  "`"~ asmStr ~ "` != `res 0, (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x83] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, (ix+01h), e",  "`"~ asmStr ~ "` != `res 0, (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x84] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, (ix+01h), h",  "`"~ asmStr ~ "` != `res 0, (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x85] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, (ix+01h), l",  "`"~ asmStr ~ "` != `res 0, (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x86] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, (ix+01h)",  "`"~ asmStr ~ "` != `res 0, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x87] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, (ix+01h), a",  "`"~ asmStr ~ "` != `res 0, (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x88] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, (ix+01h), b",  "`"~ asmStr ~ "` != `res 1, (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x89] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, (ix+01h), c",  "`"~ asmStr ~ "` != `res 1, (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x8A] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, (ix+01h), d",  "`"~ asmStr ~ "` != `res 1, (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x8B] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, (ix+01h), e",  "`"~ asmStr ~ "` != `res 1, (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x8C] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, (ix+01h), h",  "`"~ asmStr ~ "` != `res 1, (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x8D] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, (ix+01h), l",  "`"~ asmStr ~ "` != `res 1, (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x8E] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, (ix+01h)",  "`"~ asmStr ~ "` != `res 1, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x8F] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, (ix+01h), a",  "`"~ asmStr ~ "` != `res 1, (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x90] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, (ix+01h), b",  "`"~ asmStr ~ "` != `res 2, (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x91] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, (ix+01h), c",  "`"~ asmStr ~ "` != `res 2, (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x92] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, (ix+01h), d",  "`"~ asmStr ~ "` != `res 2, (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x93] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, (ix+01h), e",  "`"~ asmStr ~ "` != `res 2, (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x94] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, (ix+01h), h",  "`"~ asmStr ~ "` != `res 2, (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x95] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, (ix+01h), l",  "`"~ asmStr ~ "` != `res 2, (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x96] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, (ix+01h)",  "`"~ asmStr ~ "` != `res 2, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x97] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, (ix+01h), a",  "`"~ asmStr ~ "` != `res 2, (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x98] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, (ix+01h), b",  "`"~ asmStr ~ "` != `res 3, (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x99] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, (ix+01h), c",  "`"~ asmStr ~ "` != `res 3, (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x9A] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, (ix+01h), d",  "`"~ asmStr ~ "` != `res 3, (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x9B] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, (ix+01h), e",  "`"~ asmStr ~ "` != `res 3, (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x9C] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, (ix+01h), h",  "`"~ asmStr ~ "` != `res 3, (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x9D] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, (ix+01h), l",  "`"~ asmStr ~ "` != `res 3, (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x9E] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, (ix+01h)",  "`"~ asmStr ~ "` != `res 3, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0x9F] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, (ix+01h), a",  "`"~ asmStr ~ "` != `res 3, (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xA0] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, (ix+01h), b",  "`"~ asmStr ~ "` != `res 4, (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xA1] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, (ix+01h), c",  "`"~ asmStr ~ "` != `res 4, (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xA2] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, (ix+01h), d",  "`"~ asmStr ~ "` != `res 4, (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xA3] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, (ix+01h), e",  "`"~ asmStr ~ "` != `res 4, (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xA4] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, (ix+01h), h",  "`"~ asmStr ~ "` != `res 4, (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xA5] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, (ix+01h), l",  "`"~ asmStr ~ "` != `res 4, (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xA6] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, (ix+01h)",  "`"~ asmStr ~ "` != `res 4, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xA7] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, (ix+01h), a",  "`"~ asmStr ~ "` != `res 4, (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xA8] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, (ix+01h), b",  "`"~ asmStr ~ "` != `res 5, (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xA9] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, (ix+01h), c",  "`"~ asmStr ~ "` != `res 5, (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xAA] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, (ix+01h), d",  "`"~ asmStr ~ "` != `res 5, (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xAB] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, (ix+01h), e",  "`"~ asmStr ~ "` != `res 5, (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xAC] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, (ix+01h), h",  "`"~ asmStr ~ "` != `res 5, (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xAD] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, (ix+01h), l",  "`"~ asmStr ~ "` != `res 5, (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xAE] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, (ix+01h)",  "`"~ asmStr ~ "` != `res 5, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xAF] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, (ix+01h), a",  "`"~ asmStr ~ "` != `res 5, (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xB0] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, (ix+01h), b",  "`"~ asmStr ~ "` != `res 6, (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xB1] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, (ix+01h), c",  "`"~ asmStr ~ "` != `res 6, (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xB2] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, (ix+01h), d",  "`"~ asmStr ~ "` != `res 6, (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xB3] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, (ix+01h), e",  "`"~ asmStr ~ "` != `res 6, (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xB4] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, (ix+01h), h",  "`"~ asmStr ~ "` != `res 6, (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xB5] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, (ix+01h), l",  "`"~ asmStr ~ "` != `res 6, (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xB6] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, (ix+01h)",  "`"~ asmStr ~ "` != `res 6, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xB7] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, (ix+01h), a",  "`"~ asmStr ~ "` != `res 6, (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xB8] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, (ix+01h), b",  "`"~ asmStr ~ "` != `res 7, (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xB9] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, (ix+01h), c",  "`"~ asmStr ~ "` != `res 7, (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xBA] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, (ix+01h), d",  "`"~ asmStr ~ "` != `res 7, (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xBB] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, (ix+01h), e",  "`"~ asmStr ~ "` != `res 7, (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xBC] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, (ix+01h), h",  "`"~ asmStr ~ "` != `res 7, (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xBD] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, (ix+01h), l",  "`"~ asmStr ~ "` != `res 7, (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xBE] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, (ix+01h)",  "`"~ asmStr ~ "` != `res 7, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xBF] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, (ix+01h), a",  "`"~ asmStr ~ "` != `res 7, (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xC0] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, (ix+01h), b",  "`"~ asmStr ~ "` != `set 0, (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xC1] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, (ix+01h), c",  "`"~ asmStr ~ "` != `set 0, (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xC2] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, (ix+01h), d",  "`"~ asmStr ~ "` != `set 0, (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xC3] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, (ix+01h), e",  "`"~ asmStr ~ "` != `set 0, (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xC4] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, (ix+01h), h",  "`"~ asmStr ~ "` != `set 0, (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xC5] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, (ix+01h), l",  "`"~ asmStr ~ "` != `set 0, (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xC6] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, (ix+01h)",  "`"~ asmStr ~ "` != `set 0, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xC7] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, (ix+01h), a",  "`"~ asmStr ~ "` != `set 0, (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xC8] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, (ix+01h), b",  "`"~ asmStr ~ "` != `set 1, (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xC9] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, (ix+01h), c",  "`"~ asmStr ~ "` != `set 1, (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xCA] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, (ix+01h), d",  "`"~ asmStr ~ "` != `set 1, (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xCB] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, (ix+01h), e",  "`"~ asmStr ~ "` != `set 1, (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xCC] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, (ix+01h), h",  "`"~ asmStr ~ "` != `set 1, (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xCD] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, (ix+01h), l",  "`"~ asmStr ~ "` != `set 1, (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xCE] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, (ix+01h)",  "`"~ asmStr ~ "` != `set 1, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xCF] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, (ix+01h), a",  "`"~ asmStr ~ "` != `set 1, (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xD0] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, (ix+01h), b",  "`"~ asmStr ~ "` != `set 2, (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xD1] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, (ix+01h), c",  "`"~ asmStr ~ "` != `set 2, (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xD2] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, (ix+01h), d",  "`"~ asmStr ~ "` != `set 2, (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xD3] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, (ix+01h), e",  "`"~ asmStr ~ "` != `set 2, (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xD4] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, (ix+01h), h",  "`"~ asmStr ~ "` != `set 2, (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xD5] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, (ix+01h), l",  "`"~ asmStr ~ "` != `set 2, (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xD6] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, (ix+01h)",  "`"~ asmStr ~ "` != `set 2, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xD7] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, (ix+01h), a",  "`"~ asmStr ~ "` != `set 2, (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xD8] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, (ix+01h), b",  "`"~ asmStr ~ "` != `set 3, (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xD9] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, (ix+01h), c",  "`"~ asmStr ~ "` != `set 3, (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xDA] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, (ix+01h), d",  "`"~ asmStr ~ "` != `set 3, (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xDB] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, (ix+01h), e",  "`"~ asmStr ~ "` != `set 3, (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xDC] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, (ix+01h), h",  "`"~ asmStr ~ "` != `set 3, (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xDD] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, (ix+01h), l",  "`"~ asmStr ~ "` != `set 3, (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xDE] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, (ix+01h)",  "`"~ asmStr ~ "` != `set 3, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xDF] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, (ix+01h), a",  "`"~ asmStr ~ "` != `set 3, (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xE0] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, (ix+01h), b",  "`"~ asmStr ~ "` != `set 4, (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xE1] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, (ix+01h), c",  "`"~ asmStr ~ "` != `set 4, (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xE2] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, (ix+01h), d",  "`"~ asmStr ~ "` != `set 4, (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xE3] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, (ix+01h), e",  "`"~ asmStr ~ "` != `set 4, (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xE4] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, (ix+01h), h",  "`"~ asmStr ~ "` != `set 4, (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xE5] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, (ix+01h), l",  "`"~ asmStr ~ "` != `set 4, (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xE6] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, (ix+01h)",  "`"~ asmStr ~ "` != `set 4, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xE7] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, (ix+01h), a",  "`"~ asmStr ~ "` != `set 4, (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xE8] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, (ix+01h), b",  "`"~ asmStr ~ "` != `set 5, (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xE9] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, (ix+01h), c",  "`"~ asmStr ~ "` != `set 5, (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xEA] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, (ix+01h), d",  "`"~ asmStr ~ "` != `set 5, (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xEB] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, (ix+01h), e",  "`"~ asmStr ~ "` != `set 5, (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xEC] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, (ix+01h), h",  "`"~ asmStr ~ "` != `set 5, (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xED] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, (ix+01h), l",  "`"~ asmStr ~ "` != `set 5, (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xEE] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, (ix+01h)",  "`"~ asmStr ~ "` != `set 5, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xEF] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, (ix+01h), a",  "`"~ asmStr ~ "` != `set 5, (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xF0] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, (ix+01h), b",  "`"~ asmStr ~ "` != `set 6, (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xF1] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, (ix+01h), c",  "`"~ asmStr ~ "` != `set 6, (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xF2] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, (ix+01h), d",  "`"~ asmStr ~ "` != `set 6, (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xF3] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, (ix+01h), e",  "`"~ asmStr ~ "` != `set 6, (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xF4] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, (ix+01h), h",  "`"~ asmStr ~ "` != `set 6, (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xF5] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, (ix+01h), l",  "`"~ asmStr ~ "` != `set 6, (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xF6] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, (ix+01h)",  "`"~ asmStr ~ "` != `set 6, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xF7] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, (ix+01h), a",  "`"~ asmStr ~ "` != `set 6, (ix+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xF8] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, (ix+01h), b",  "`"~ asmStr ~ "` != `set 7, (ix+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xF9] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, (ix+01h), c",  "`"~ asmStr ~ "` != `set 7, (ix+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xFA] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, (ix+01h), d",  "`"~ asmStr ~ "` != `set 7, (ix+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xFB] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, (ix+01h), e",  "`"~ asmStr ~ "` != `set 7, (ix+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xFC] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, (ix+01h), h",  "`"~ asmStr ~ "` != `set 7, (ix+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xFD] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, (ix+01h), l",  "`"~ asmStr ~ "` != `set 7, (ix+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xFE] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, (ix+01h)",  "`"~ asmStr ~ "` != `set 7, (ix+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDD, 0xCB, 0x01, 0xFF] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, (ix+01h), a",  "`"~ asmStr ~ "` != `set 7, (ix+01h), a`");
}
unittest
{
    size_t i;
    string asmStr;
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc (iy+01h), b",  "`"~ asmStr ~ "` != `rlc (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x01] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc (iy+01h), c",  "`"~ asmStr ~ "` != `rlc (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x02] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc (iy+01h), d",  "`"~ asmStr ~ "` != `rlc (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x03] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc (iy+01h), e",  "`"~ asmStr ~ "` != `rlc (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x04] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc (iy+01h), h",  "`"~ asmStr ~ "` != `rlc (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x05] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc (iy+01h), l",  "`"~ asmStr ~ "` != `rlc (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x06] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc (iy+01h)",  "`"~ asmStr ~ "` != `rlc (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x07] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlc (iy+01h), a",  "`"~ asmStr ~ "` != `rlc (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x08] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc (iy+01h), b",  "`"~ asmStr ~ "` != `rrc (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x09] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc (iy+01h), c",  "`"~ asmStr ~ "` != `rrc (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x0A] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc (iy+01h), d",  "`"~ asmStr ~ "` != `rrc (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x0B] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc (iy+01h), e",  "`"~ asmStr ~ "` != `rrc (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x0C] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc (iy+01h), h",  "`"~ asmStr ~ "` != `rrc (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x0D] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc (iy+01h), l",  "`"~ asmStr ~ "` != `rrc (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x0E] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc (iy+01h)",  "`"~ asmStr ~ "` != `rrc (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x0F] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrc (iy+01h), a",  "`"~ asmStr ~ "` != `rrc (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x10] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl (iy+01h), b",  "`"~ asmStr ~ "` != `rl (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x11] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl (iy+01h), c",  "`"~ asmStr ~ "` != `rl (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x12] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl (iy+01h), d",  "`"~ asmStr ~ "` != `rl (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x13] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl (iy+01h), e",  "`"~ asmStr ~ "` != `rl (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x14] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl (iy+01h), h",  "`"~ asmStr ~ "` != `rl (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x15] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl (iy+01h), l",  "`"~ asmStr ~ "` != `rl (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x16] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl (iy+01h)",  "`"~ asmStr ~ "` != `rl (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x17] ).getInstruction(i).toAssembly;
    assert(asmStr == "rl (iy+01h), a",  "`"~ asmStr ~ "` != `rl (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x18] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr (iy+01h), b",  "`"~ asmStr ~ "` != `rr (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x19] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr (iy+01h), c",  "`"~ asmStr ~ "` != `rr (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x1A] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr (iy+01h), d",  "`"~ asmStr ~ "` != `rr (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x1B] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr (iy+01h), e",  "`"~ asmStr ~ "` != `rr (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x1C] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr (iy+01h), h",  "`"~ asmStr ~ "` != `rr (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x1D] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr (iy+01h), l",  "`"~ asmStr ~ "` != `rr (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x1E] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr (iy+01h)",  "`"~ asmStr ~ "` != `rr (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x1F] ).getInstruction(i).toAssembly;
    assert(asmStr == "rr (iy+01h), a",  "`"~ asmStr ~ "` != `rr (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x20] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla (iy+01h), b",  "`"~ asmStr ~ "` != `sla (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x21] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla (iy+01h), c",  "`"~ asmStr ~ "` != `sla (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x22] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla (iy+01h), d",  "`"~ asmStr ~ "` != `sla (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x23] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla (iy+01h), e",  "`"~ asmStr ~ "` != `sla (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x24] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla (iy+01h), h",  "`"~ asmStr ~ "` != `sla (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x25] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla (iy+01h), l",  "`"~ asmStr ~ "` != `sla (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x26] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla (iy+01h)",  "`"~ asmStr ~ "` != `sla (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x27] ).getInstruction(i).toAssembly;
    assert(asmStr == "sla (iy+01h), a",  "`"~ asmStr ~ "` != `sla (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x28] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra (iy+01h), b",  "`"~ asmStr ~ "` != `sra (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x29] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra (iy+01h), c",  "`"~ asmStr ~ "` != `sra (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x2A] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra (iy+01h), d",  "`"~ asmStr ~ "` != `sra (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x2B] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra (iy+01h), e",  "`"~ asmStr ~ "` != `sra (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x2C] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra (iy+01h), h",  "`"~ asmStr ~ "` != `sra (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x2D] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra (iy+01h), l",  "`"~ asmStr ~ "` != `sra (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x2E] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra (iy+01h)",  "`"~ asmStr ~ "` != `sra (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x2F] ).getInstruction(i).toAssembly;
    assert(asmStr == "sra (iy+01h), a",  "`"~ asmStr ~ "` != `sra (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x30] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll (iy+01h), b",  "`"~ asmStr ~ "` != `sll (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x31] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll (iy+01h), c",  "`"~ asmStr ~ "` != `sll (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x32] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll (iy+01h), d",  "`"~ asmStr ~ "` != `sll (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x33] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll (iy+01h), e",  "`"~ asmStr ~ "` != `sll (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x34] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll (iy+01h), h",  "`"~ asmStr ~ "` != `sll (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x35] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll (iy+01h), l",  "`"~ asmStr ~ "` != `sll (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x36] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll (iy+01h)",  "`"~ asmStr ~ "` != `sll (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x37] ).getInstruction(i).toAssembly;
    assert(asmStr == "sll (iy+01h), a",  "`"~ asmStr ~ "` != `sll (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x38] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl (iy+01h), b",  "`"~ asmStr ~ "` != `srl (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x39] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl (iy+01h), c",  "`"~ asmStr ~ "` != `srl (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x3A] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl (iy+01h), d",  "`"~ asmStr ~ "` != `srl (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x3B] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl (iy+01h), e",  "`"~ asmStr ~ "` != `srl (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x3C] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl (iy+01h), h",  "`"~ asmStr ~ "` != `srl (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x3D] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl (iy+01h), l",  "`"~ asmStr ~ "` != `srl (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x3E] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl (iy+01h)",  "`"~ asmStr ~ "` != `srl (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x3F] ).getInstruction(i).toAssembly;
    assert(asmStr == "srl (iy+01h), a",  "`"~ asmStr ~ "` != `srl (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x40] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, (iy+01h)",  "`"~ asmStr ~ "` != `bit 0, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x41] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, (iy+01h)",  "`"~ asmStr ~ "` != `bit 0, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x42] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, (iy+01h)",  "`"~ asmStr ~ "` != `bit 0, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x43] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, (iy+01h)",  "`"~ asmStr ~ "` != `bit 0, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x44] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, (iy+01h)",  "`"~ asmStr ~ "` != `bit 0, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x45] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, (iy+01h)",  "`"~ asmStr ~ "` != `bit 0, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x46] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, (iy+01h)",  "`"~ asmStr ~ "` != `bit 0, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x47] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 0, (iy+01h)",  "`"~ asmStr ~ "` != `bit 0, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x48] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, (iy+01h)",  "`"~ asmStr ~ "` != `bit 1, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x49] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, (iy+01h)",  "`"~ asmStr ~ "` != `bit 1, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x4A] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, (iy+01h)",  "`"~ asmStr ~ "` != `bit 1, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x4B] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, (iy+01h)",  "`"~ asmStr ~ "` != `bit 1, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x4C] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, (iy+01h)",  "`"~ asmStr ~ "` != `bit 1, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x4D] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, (iy+01h)",  "`"~ asmStr ~ "` != `bit 1, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x4E] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, (iy+01h)",  "`"~ asmStr ~ "` != `bit 1, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x4F] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 1, (iy+01h)",  "`"~ asmStr ~ "` != `bit 1, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x50] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, (iy+01h)",  "`"~ asmStr ~ "` != `bit 2, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x51] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, (iy+01h)",  "`"~ asmStr ~ "` != `bit 2, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x52] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, (iy+01h)",  "`"~ asmStr ~ "` != `bit 2, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x53] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, (iy+01h)",  "`"~ asmStr ~ "` != `bit 2, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x54] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, (iy+01h)",  "`"~ asmStr ~ "` != `bit 2, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x55] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, (iy+01h)",  "`"~ asmStr ~ "` != `bit 2, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x56] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, (iy+01h)",  "`"~ asmStr ~ "` != `bit 2, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x57] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 2, (iy+01h)",  "`"~ asmStr ~ "` != `bit 2, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x58] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, (iy+01h)",  "`"~ asmStr ~ "` != `bit 3, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x59] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, (iy+01h)",  "`"~ asmStr ~ "` != `bit 3, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x5A] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, (iy+01h)",  "`"~ asmStr ~ "` != `bit 3, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x5B] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, (iy+01h)",  "`"~ asmStr ~ "` != `bit 3, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x5C] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, (iy+01h)",  "`"~ asmStr ~ "` != `bit 3, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x5D] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, (iy+01h)",  "`"~ asmStr ~ "` != `bit 3, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x5E] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, (iy+01h)",  "`"~ asmStr ~ "` != `bit 3, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x5F] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 3, (iy+01h)",  "`"~ asmStr ~ "` != `bit 3, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x60] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, (iy+01h)",  "`"~ asmStr ~ "` != `bit 4, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x61] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, (iy+01h)",  "`"~ asmStr ~ "` != `bit 4, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x62] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, (iy+01h)",  "`"~ asmStr ~ "` != `bit 4, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x63] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, (iy+01h)",  "`"~ asmStr ~ "` != `bit 4, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x64] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, (iy+01h)",  "`"~ asmStr ~ "` != `bit 4, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x65] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, (iy+01h)",  "`"~ asmStr ~ "` != `bit 4, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x66] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, (iy+01h)",  "`"~ asmStr ~ "` != `bit 4, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x67] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 4, (iy+01h)",  "`"~ asmStr ~ "` != `bit 4, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x68] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, (iy+01h)",  "`"~ asmStr ~ "` != `bit 5, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x69] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, (iy+01h)",  "`"~ asmStr ~ "` != `bit 5, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x6A] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, (iy+01h)",  "`"~ asmStr ~ "` != `bit 5, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x6B] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, (iy+01h)",  "`"~ asmStr ~ "` != `bit 5, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x6C] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, (iy+01h)",  "`"~ asmStr ~ "` != `bit 5, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x6D] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, (iy+01h)",  "`"~ asmStr ~ "` != `bit 5, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x6E] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, (iy+01h)",  "`"~ asmStr ~ "` != `bit 5, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x6F] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 5, (iy+01h)",  "`"~ asmStr ~ "` != `bit 5, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x70] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, (iy+01h)",  "`"~ asmStr ~ "` != `bit 6, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x71] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, (iy+01h)",  "`"~ asmStr ~ "` != `bit 6, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x72] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, (iy+01h)",  "`"~ asmStr ~ "` != `bit 6, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x73] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, (iy+01h)",  "`"~ asmStr ~ "` != `bit 6, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x74] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, (iy+01h)",  "`"~ asmStr ~ "` != `bit 6, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x75] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, (iy+01h)",  "`"~ asmStr ~ "` != `bit 6, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x76] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, (iy+01h)",  "`"~ asmStr ~ "` != `bit 6, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x77] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 6, (iy+01h)",  "`"~ asmStr ~ "` != `bit 6, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x78] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, (iy+01h)",  "`"~ asmStr ~ "` != `bit 7, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x79] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, (iy+01h)",  "`"~ asmStr ~ "` != `bit 7, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x7A] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, (iy+01h)",  "`"~ asmStr ~ "` != `bit 7, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x7B] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, (iy+01h)",  "`"~ asmStr ~ "` != `bit 7, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x7C] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, (iy+01h)",  "`"~ asmStr ~ "` != `bit 7, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x7D] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, (iy+01h)",  "`"~ asmStr ~ "` != `bit 7, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x7E] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, (iy+01h)",  "`"~ asmStr ~ "` != `bit 7, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x7F] ).getInstruction(i).toAssembly;
    assert(asmStr == "bit 7, (iy+01h)",  "`"~ asmStr ~ "` != `bit 7, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x80] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, (iy+01h), b",  "`"~ asmStr ~ "` != `res 0, (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x81] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, (iy+01h), c",  "`"~ asmStr ~ "` != `res 0, (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x82] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, (iy+01h), d",  "`"~ asmStr ~ "` != `res 0, (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x83] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, (iy+01h), e",  "`"~ asmStr ~ "` != `res 0, (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x84] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, (iy+01h), h",  "`"~ asmStr ~ "` != `res 0, (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x85] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, (iy+01h), l",  "`"~ asmStr ~ "` != `res 0, (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x86] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, (iy+01h)",  "`"~ asmStr ~ "` != `res 0, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x87] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 0, (iy+01h), a",  "`"~ asmStr ~ "` != `res 0, (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x88] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, (iy+01h), b",  "`"~ asmStr ~ "` != `res 1, (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x89] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, (iy+01h), c",  "`"~ asmStr ~ "` != `res 1, (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x8A] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, (iy+01h), d",  "`"~ asmStr ~ "` != `res 1, (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x8B] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, (iy+01h), e",  "`"~ asmStr ~ "` != `res 1, (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x8C] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, (iy+01h), h",  "`"~ asmStr ~ "` != `res 1, (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x8D] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, (iy+01h), l",  "`"~ asmStr ~ "` != `res 1, (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x8E] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, (iy+01h)",  "`"~ asmStr ~ "` != `res 1, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x8F] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 1, (iy+01h), a",  "`"~ asmStr ~ "` != `res 1, (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x90] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, (iy+01h), b",  "`"~ asmStr ~ "` != `res 2, (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x91] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, (iy+01h), c",  "`"~ asmStr ~ "` != `res 2, (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x92] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, (iy+01h), d",  "`"~ asmStr ~ "` != `res 2, (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x93] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, (iy+01h), e",  "`"~ asmStr ~ "` != `res 2, (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x94] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, (iy+01h), h",  "`"~ asmStr ~ "` != `res 2, (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x95] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, (iy+01h), l",  "`"~ asmStr ~ "` != `res 2, (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x96] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, (iy+01h)",  "`"~ asmStr ~ "` != `res 2, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x97] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 2, (iy+01h), a",  "`"~ asmStr ~ "` != `res 2, (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x98] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, (iy+01h), b",  "`"~ asmStr ~ "` != `res 3, (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x99] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, (iy+01h), c",  "`"~ asmStr ~ "` != `res 3, (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x9A] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, (iy+01h), d",  "`"~ asmStr ~ "` != `res 3, (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x9B] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, (iy+01h), e",  "`"~ asmStr ~ "` != `res 3, (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x9C] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, (iy+01h), h",  "`"~ asmStr ~ "` != `res 3, (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x9D] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, (iy+01h), l",  "`"~ asmStr ~ "` != `res 3, (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x9E] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, (iy+01h)",  "`"~ asmStr ~ "` != `res 3, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0x9F] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 3, (iy+01h), a",  "`"~ asmStr ~ "` != `res 3, (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xA0] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, (iy+01h), b",  "`"~ asmStr ~ "` != `res 4, (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xA1] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, (iy+01h), c",  "`"~ asmStr ~ "` != `res 4, (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xA2] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, (iy+01h), d",  "`"~ asmStr ~ "` != `res 4, (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xA3] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, (iy+01h), e",  "`"~ asmStr ~ "` != `res 4, (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xA4] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, (iy+01h), h",  "`"~ asmStr ~ "` != `res 4, (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xA5] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, (iy+01h), l",  "`"~ asmStr ~ "` != `res 4, (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xA6] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, (iy+01h)",  "`"~ asmStr ~ "` != `res 4, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xA7] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 4, (iy+01h), a",  "`"~ asmStr ~ "` != `res 4, (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xA8] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, (iy+01h), b",  "`"~ asmStr ~ "` != `res 5, (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xA9] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, (iy+01h), c",  "`"~ asmStr ~ "` != `res 5, (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xAA] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, (iy+01h), d",  "`"~ asmStr ~ "` != `res 5, (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xAB] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, (iy+01h), e",  "`"~ asmStr ~ "` != `res 5, (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xAC] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, (iy+01h), h",  "`"~ asmStr ~ "` != `res 5, (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xAD] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, (iy+01h), l",  "`"~ asmStr ~ "` != `res 5, (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xAE] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, (iy+01h)",  "`"~ asmStr ~ "` != `res 5, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xAF] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 5, (iy+01h), a",  "`"~ asmStr ~ "` != `res 5, (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xB0] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, (iy+01h), b",  "`"~ asmStr ~ "` != `res 6, (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xB1] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, (iy+01h), c",  "`"~ asmStr ~ "` != `res 6, (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xB2] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, (iy+01h), d",  "`"~ asmStr ~ "` != `res 6, (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xB3] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, (iy+01h), e",  "`"~ asmStr ~ "` != `res 6, (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xB4] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, (iy+01h), h",  "`"~ asmStr ~ "` != `res 6, (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xB5] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, (iy+01h), l",  "`"~ asmStr ~ "` != `res 6, (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xB6] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, (iy+01h)",  "`"~ asmStr ~ "` != `res 6, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xB7] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 6, (iy+01h), a",  "`"~ asmStr ~ "` != `res 6, (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xB8] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, (iy+01h), b",  "`"~ asmStr ~ "` != `res 7, (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xB9] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, (iy+01h), c",  "`"~ asmStr ~ "` != `res 7, (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xBA] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, (iy+01h), d",  "`"~ asmStr ~ "` != `res 7, (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xBB] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, (iy+01h), e",  "`"~ asmStr ~ "` != `res 7, (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xBC] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, (iy+01h), h",  "`"~ asmStr ~ "` != `res 7, (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xBD] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, (iy+01h), l",  "`"~ asmStr ~ "` != `res 7, (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xBE] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, (iy+01h)",  "`"~ asmStr ~ "` != `res 7, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xBF] ).getInstruction(i).toAssembly;
    assert(asmStr == "res 7, (iy+01h), a",  "`"~ asmStr ~ "` != `res 7, (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xC0] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, (iy+01h), b",  "`"~ asmStr ~ "` != `set 0, (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xC1] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, (iy+01h), c",  "`"~ asmStr ~ "` != `set 0, (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xC2] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, (iy+01h), d",  "`"~ asmStr ~ "` != `set 0, (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xC3] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, (iy+01h), e",  "`"~ asmStr ~ "` != `set 0, (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xC4] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, (iy+01h), h",  "`"~ asmStr ~ "` != `set 0, (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xC5] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, (iy+01h), l",  "`"~ asmStr ~ "` != `set 0, (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xC6] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, (iy+01h)",  "`"~ asmStr ~ "` != `set 0, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xC7] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 0, (iy+01h), a",  "`"~ asmStr ~ "` != `set 0, (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xC8] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, (iy+01h), b",  "`"~ asmStr ~ "` != `set 1, (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xC9] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, (iy+01h), c",  "`"~ asmStr ~ "` != `set 1, (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xCA] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, (iy+01h), d",  "`"~ asmStr ~ "` != `set 1, (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xCB] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, (iy+01h), e",  "`"~ asmStr ~ "` != `set 1, (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xCC] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, (iy+01h), h",  "`"~ asmStr ~ "` != `set 1, (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xCD] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, (iy+01h), l",  "`"~ asmStr ~ "` != `set 1, (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xCE] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, (iy+01h)",  "`"~ asmStr ~ "` != `set 1, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xCF] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 1, (iy+01h), a",  "`"~ asmStr ~ "` != `set 1, (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xD0] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, (iy+01h), b",  "`"~ asmStr ~ "` != `set 2, (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xD1] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, (iy+01h), c",  "`"~ asmStr ~ "` != `set 2, (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xD2] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, (iy+01h), d",  "`"~ asmStr ~ "` != `set 2, (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xD3] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, (iy+01h), e",  "`"~ asmStr ~ "` != `set 2, (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xD4] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, (iy+01h), h",  "`"~ asmStr ~ "` != `set 2, (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xD5] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, (iy+01h), l",  "`"~ asmStr ~ "` != `set 2, (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xD6] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, (iy+01h)",  "`"~ asmStr ~ "` != `set 2, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xD7] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 2, (iy+01h), a",  "`"~ asmStr ~ "` != `set 2, (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xD8] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, (iy+01h), b",  "`"~ asmStr ~ "` != `set 3, (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xD9] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, (iy+01h), c",  "`"~ asmStr ~ "` != `set 3, (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xDA] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, (iy+01h), d",  "`"~ asmStr ~ "` != `set 3, (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xDB] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, (iy+01h), e",  "`"~ asmStr ~ "` != `set 3, (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xDC] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, (iy+01h), h",  "`"~ asmStr ~ "` != `set 3, (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xDD] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, (iy+01h), l",  "`"~ asmStr ~ "` != `set 3, (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xDE] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, (iy+01h)",  "`"~ asmStr ~ "` != `set 3, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xDF] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 3, (iy+01h), a",  "`"~ asmStr ~ "` != `set 3, (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xE0] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, (iy+01h), b",  "`"~ asmStr ~ "` != `set 4, (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xE1] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, (iy+01h), c",  "`"~ asmStr ~ "` != `set 4, (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xE2] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, (iy+01h), d",  "`"~ asmStr ~ "` != `set 4, (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xE3] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, (iy+01h), e",  "`"~ asmStr ~ "` != `set 4, (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xE4] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, (iy+01h), h",  "`"~ asmStr ~ "` != `set 4, (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xE5] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, (iy+01h), l",  "`"~ asmStr ~ "` != `set 4, (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xE6] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, (iy+01h)",  "`"~ asmStr ~ "` != `set 4, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xE7] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 4, (iy+01h), a",  "`"~ asmStr ~ "` != `set 4, (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xE8] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, (iy+01h), b",  "`"~ asmStr ~ "` != `set 5, (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xE9] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, (iy+01h), c",  "`"~ asmStr ~ "` != `set 5, (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xEA] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, (iy+01h), d",  "`"~ asmStr ~ "` != `set 5, (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xEB] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, (iy+01h), e",  "`"~ asmStr ~ "` != `set 5, (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xEC] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, (iy+01h), h",  "`"~ asmStr ~ "` != `set 5, (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xED] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, (iy+01h), l",  "`"~ asmStr ~ "` != `set 5, (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xEE] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, (iy+01h)",  "`"~ asmStr ~ "` != `set 5, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xEF] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 5, (iy+01h), a",  "`"~ asmStr ~ "` != `set 5, (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xF0] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, (iy+01h), b",  "`"~ asmStr ~ "` != `set 6, (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xF1] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, (iy+01h), c",  "`"~ asmStr ~ "` != `set 6, (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xF2] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, (iy+01h), d",  "`"~ asmStr ~ "` != `set 6, (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xF3] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, (iy+01h), e",  "`"~ asmStr ~ "` != `set 6, (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xF4] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, (iy+01h), h",  "`"~ asmStr ~ "` != `set 6, (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xF5] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, (iy+01h), l",  "`"~ asmStr ~ "` != `set 6, (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xF6] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, (iy+01h)",  "`"~ asmStr ~ "` != `set 6, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xF7] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 6, (iy+01h), a",  "`"~ asmStr ~ "` != `set 6, (iy+01h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xF8] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, (iy+01h), b",  "`"~ asmStr ~ "` != `set 7, (iy+01h), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xF9] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, (iy+01h), c",  "`"~ asmStr ~ "` != `set 7, (iy+01h), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xFA] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, (iy+01h), d",  "`"~ asmStr ~ "` != `set 7, (iy+01h), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xFB] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, (iy+01h), e",  "`"~ asmStr ~ "` != `set 7, (iy+01h), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xFC] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, (iy+01h), h",  "`"~ asmStr ~ "` != `set 7, (iy+01h), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xFD] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, (iy+01h), l",  "`"~ asmStr ~ "` != `set 7, (iy+01h), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xFE] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, (iy+01h)",  "`"~ asmStr ~ "` != `set 7, (iy+01h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFD, 0xCB, 0x01, 0xFF] ).getInstruction(i).toAssembly;
    assert(asmStr == "set 7, (iy+01h), a",  "`"~ asmStr ~ "` != `set 7, (iy+01h), a`");
}