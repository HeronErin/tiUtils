module dissasembly.z80_test;
import dissasembly.z80;
unittest
{
    size_t i;
    string asmStr;
    i = 0;
    asmStr = ( cast(ubyte[])[0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "nop",  "`"~ asmStr ~ "` != `nop`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x01, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld bc, 0000h",  "`"~ asmStr ~ "` != `ld bc, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x02] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (bc), a",  "`"~ asmStr ~ "` != `ld (bc), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x03] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc bc",  "`"~ asmStr ~ "` != `inc bc`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x04] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc b",  "`"~ asmStr ~ "` != `inc b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x05] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec b",  "`"~ asmStr ~ "` != `dec b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x06, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, 00h",  "`"~ asmStr ~ "` != `ld b, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x07] ).getInstruction(i).toAssembly;
    assert(asmStr == "rlca",  "`"~ asmStr ~ "` != `rlca`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x08] ).getInstruction(i).toAssembly;
    assert(asmStr == "ex af, af'",  "`"~ asmStr ~ "` != `ex af, af'`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x09] ).getInstruction(i).toAssembly;
    assert(asmStr == "add hl, bc",  "`"~ asmStr ~ "` != `add hl, bc`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x0A] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, (bc)",  "`"~ asmStr ~ "` != `ld a, (bc)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x0B] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec bc",  "`"~ asmStr ~ "` != `dec bc`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x0C] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc c",  "`"~ asmStr ~ "` != `inc c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x0D] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec c",  "`"~ asmStr ~ "` != `dec c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x0E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, 00h",  "`"~ asmStr ~ "` != `ld c, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x0F] ).getInstruction(i).toAssembly;
    assert(asmStr == "rrca",  "`"~ asmStr ~ "` != `rrca`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x10, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "djnz 00h",  "`"~ asmStr ~ "` != `djnz 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x11, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld de, 0000h",  "`"~ asmStr ~ "` != `ld de, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x12] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (de), a",  "`"~ asmStr ~ "` != `ld (de), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x13] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc de",  "`"~ asmStr ~ "` != `inc de`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x14] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc d",  "`"~ asmStr ~ "` != `inc d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x15] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec d",  "`"~ asmStr ~ "` != `dec d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x16, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, 00h",  "`"~ asmStr ~ "` != `ld d, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x17] ).getInstruction(i).toAssembly;
    assert(asmStr == "rla",  "`"~ asmStr ~ "` != `rla`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x18, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jr 00h",  "`"~ asmStr ~ "` != `jr 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x19] ).getInstruction(i).toAssembly;
    assert(asmStr == "add hl, de",  "`"~ asmStr ~ "` != `add hl, de`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x1A] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, (de)",  "`"~ asmStr ~ "` != `ld a, (de)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x1B] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec de",  "`"~ asmStr ~ "` != `dec de`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x1C] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc e",  "`"~ asmStr ~ "` != `inc e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x1D] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec e",  "`"~ asmStr ~ "` != `dec e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x1E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, 00h",  "`"~ asmStr ~ "` != `ld e, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x1F] ).getInstruction(i).toAssembly;
    assert(asmStr == "rra",  "`"~ asmStr ~ "` != `rra`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x20, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jr nz, 00h",  "`"~ asmStr ~ "` != `jr nz, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x21, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld hl, 0000h",  "`"~ asmStr ~ "` != `ld hl, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x22, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (0000h), hl",  "`"~ asmStr ~ "` != `ld (0000h), hl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x23] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc hl",  "`"~ asmStr ~ "` != `inc hl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x24] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc h",  "`"~ asmStr ~ "` != `inc h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x25] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec h",  "`"~ asmStr ~ "` != `dec h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x26, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld h, 00h",  "`"~ asmStr ~ "` != `ld h, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x27] ).getInstruction(i).toAssembly;
    assert(asmStr == "daa",  "`"~ asmStr ~ "` != `daa`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x28, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jr z, 00h",  "`"~ asmStr ~ "` != `jr z, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x29] ).getInstruction(i).toAssembly;
    assert(asmStr == "add hl, hl",  "`"~ asmStr ~ "` != `add hl, hl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x2A, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld hl, (0000h)",  "`"~ asmStr ~ "` != `ld hl, (0000h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x2B] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec hl",  "`"~ asmStr ~ "` != `dec hl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x2C] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc l",  "`"~ asmStr ~ "` != `inc l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x2D] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec l",  "`"~ asmStr ~ "` != `dec l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x2E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld l, 00h",  "`"~ asmStr ~ "` != `ld l, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x2F] ).getInstruction(i).toAssembly;
    assert(asmStr == "cpl",  "`"~ asmStr ~ "` != `cpl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x30, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jr nc, 00h",  "`"~ asmStr ~ "` != `jr nc, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x31, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld sp, 0000h",  "`"~ asmStr ~ "` != `ld sp, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x32, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (0000h), a",  "`"~ asmStr ~ "` != `ld (0000h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x33] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc sp",  "`"~ asmStr ~ "` != `inc sp`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x34] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc (hl)",  "`"~ asmStr ~ "` != `inc (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x35] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec (hl)",  "`"~ asmStr ~ "` != `dec (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x36, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (hl), 00h",  "`"~ asmStr ~ "` != `ld (hl), 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x37] ).getInstruction(i).toAssembly;
    assert(asmStr == "scf",  "`"~ asmStr ~ "` != `scf`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x38, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jr c, 00h",  "`"~ asmStr ~ "` != `jr c, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x39] ).getInstruction(i).toAssembly;
    assert(asmStr == "add hl, sp",  "`"~ asmStr ~ "` != `add hl, sp`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x3A, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, (0000h)",  "`"~ asmStr ~ "` != `ld a, (0000h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x3B] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec sp",  "`"~ asmStr ~ "` != `dec sp`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x3C] ).getInstruction(i).toAssembly;
    assert(asmStr == "inc a",  "`"~ asmStr ~ "` != `inc a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x3D] ).getInstruction(i).toAssembly;
    assert(asmStr == "dec a",  "`"~ asmStr ~ "` != `dec a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x3E, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, 00h",  "`"~ asmStr ~ "` != `ld a, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x3F] ).getInstruction(i).toAssembly;
    assert(asmStr == "ccf",  "`"~ asmStr ~ "` != `ccf`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x40] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, b",  "`"~ asmStr ~ "` != `ld b, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x41] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, c",  "`"~ asmStr ~ "` != `ld b, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x42] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, d",  "`"~ asmStr ~ "` != `ld b, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x43] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, e",  "`"~ asmStr ~ "` != `ld b, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x44] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, h",  "`"~ asmStr ~ "` != `ld b, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x45] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, l",  "`"~ asmStr ~ "` != `ld b, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x46] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, (hl)",  "`"~ asmStr ~ "` != `ld b, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x47] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld b, a",  "`"~ asmStr ~ "` != `ld b, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x48] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, b",  "`"~ asmStr ~ "` != `ld c, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x49] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, c",  "`"~ asmStr ~ "` != `ld c, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x4A] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, d",  "`"~ asmStr ~ "` != `ld c, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x4B] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, e",  "`"~ asmStr ~ "` != `ld c, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x4C] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, h",  "`"~ asmStr ~ "` != `ld c, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x4D] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, l",  "`"~ asmStr ~ "` != `ld c, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x4E] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, (hl)",  "`"~ asmStr ~ "` != `ld c, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x4F] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld c, a",  "`"~ asmStr ~ "` != `ld c, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x50] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, b",  "`"~ asmStr ~ "` != `ld d, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x51] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, c",  "`"~ asmStr ~ "` != `ld d, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x52] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, d",  "`"~ asmStr ~ "` != `ld d, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x53] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, e",  "`"~ asmStr ~ "` != `ld d, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x54] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, h",  "`"~ asmStr ~ "` != `ld d, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x55] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, l",  "`"~ asmStr ~ "` != `ld d, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x56] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, (hl)",  "`"~ asmStr ~ "` != `ld d, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x57] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld d, a",  "`"~ asmStr ~ "` != `ld d, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x58] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, b",  "`"~ asmStr ~ "` != `ld e, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x59] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, c",  "`"~ asmStr ~ "` != `ld e, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x5A] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, d",  "`"~ asmStr ~ "` != `ld e, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x5B] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, e",  "`"~ asmStr ~ "` != `ld e, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x5C] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, h",  "`"~ asmStr ~ "` != `ld e, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x5D] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, l",  "`"~ asmStr ~ "` != `ld e, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x5E] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, (hl)",  "`"~ asmStr ~ "` != `ld e, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x5F] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld e, a",  "`"~ asmStr ~ "` != `ld e, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x60] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld h, b",  "`"~ asmStr ~ "` != `ld h, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x61] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld h, c",  "`"~ asmStr ~ "` != `ld h, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x62] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld h, d",  "`"~ asmStr ~ "` != `ld h, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x63] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld h, e",  "`"~ asmStr ~ "` != `ld h, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x64] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld h, h",  "`"~ asmStr ~ "` != `ld h, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x65] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld h, l",  "`"~ asmStr ~ "` != `ld h, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x66] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld h, (hl)",  "`"~ asmStr ~ "` != `ld h, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x67] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld h, a",  "`"~ asmStr ~ "` != `ld h, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x68] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld l, b",  "`"~ asmStr ~ "` != `ld l, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x69] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld l, c",  "`"~ asmStr ~ "` != `ld l, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x6A] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld l, d",  "`"~ asmStr ~ "` != `ld l, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x6B] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld l, e",  "`"~ asmStr ~ "` != `ld l, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x6C] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld l, h",  "`"~ asmStr ~ "` != `ld l, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x6D] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld l, l",  "`"~ asmStr ~ "` != `ld l, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x6E] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld l, (hl)",  "`"~ asmStr ~ "` != `ld l, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x6F] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld l, a",  "`"~ asmStr ~ "` != `ld l, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x70] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (hl), b",  "`"~ asmStr ~ "` != `ld (hl), b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x71] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (hl), c",  "`"~ asmStr ~ "` != `ld (hl), c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x72] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (hl), d",  "`"~ asmStr ~ "` != `ld (hl), d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x73] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (hl), e",  "`"~ asmStr ~ "` != `ld (hl), e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x74] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (hl), h",  "`"~ asmStr ~ "` != `ld (hl), h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x75] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (hl), l",  "`"~ asmStr ~ "` != `ld (hl), l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x76] ).getInstruction(i).toAssembly;
    assert(asmStr == "halt",  "`"~ asmStr ~ "` != `halt`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x77] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld (hl), a",  "`"~ asmStr ~ "` != `ld (hl), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x78] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, b",  "`"~ asmStr ~ "` != `ld a, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x79] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, c",  "`"~ asmStr ~ "` != `ld a, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x7A] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, d",  "`"~ asmStr ~ "` != `ld a, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x7B] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, e",  "`"~ asmStr ~ "` != `ld a, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x7C] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, h",  "`"~ asmStr ~ "` != `ld a, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x7D] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, l",  "`"~ asmStr ~ "` != `ld a, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x7E] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, (hl)",  "`"~ asmStr ~ "` != `ld a, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x7F] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld a, a",  "`"~ asmStr ~ "` != `ld a, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x80] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, b",  "`"~ asmStr ~ "` != `add a, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x81] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, c",  "`"~ asmStr ~ "` != `add a, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x82] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, d",  "`"~ asmStr ~ "` != `add a, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x83] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, e",  "`"~ asmStr ~ "` != `add a, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x84] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, h",  "`"~ asmStr ~ "` != `add a, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x85] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, l",  "`"~ asmStr ~ "` != `add a, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x86] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, (hl)",  "`"~ asmStr ~ "` != `add a, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x87] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, a",  "`"~ asmStr ~ "` != `add a, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x88] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, b",  "`"~ asmStr ~ "` != `adc a, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x89] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, c",  "`"~ asmStr ~ "` != `adc a, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x8A] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, d",  "`"~ asmStr ~ "` != `adc a, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x8B] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, e",  "`"~ asmStr ~ "` != `adc a, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x8C] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, h",  "`"~ asmStr ~ "` != `adc a, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x8D] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, l",  "`"~ asmStr ~ "` != `adc a, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x8E] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, (hl)",  "`"~ asmStr ~ "` != `adc a, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x8F] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, a",  "`"~ asmStr ~ "` != `adc a, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x90] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub b",  "`"~ asmStr ~ "` != `sub b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x91] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub c",  "`"~ asmStr ~ "` != `sub c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x92] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub d",  "`"~ asmStr ~ "` != `sub d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x93] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub e",  "`"~ asmStr ~ "` != `sub e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x94] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub h",  "`"~ asmStr ~ "` != `sub h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x95] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub l",  "`"~ asmStr ~ "` != `sub l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x96] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub (hl)",  "`"~ asmStr ~ "` != `sub (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x97] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub a",  "`"~ asmStr ~ "` != `sub a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x98] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, b",  "`"~ asmStr ~ "` != `sbc a, b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x99] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, c",  "`"~ asmStr ~ "` != `sbc a, c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x9A] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, d",  "`"~ asmStr ~ "` != `sbc a, d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x9B] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, e",  "`"~ asmStr ~ "` != `sbc a, e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x9C] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, h",  "`"~ asmStr ~ "` != `sbc a, h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x9D] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, l",  "`"~ asmStr ~ "` != `sbc a, l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x9E] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, (hl)",  "`"~ asmStr ~ "` != `sbc a, (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0x9F] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, a",  "`"~ asmStr ~ "` != `sbc a, a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xA0] ).getInstruction(i).toAssembly;
    assert(asmStr == "and b",  "`"~ asmStr ~ "` != `and b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xA1] ).getInstruction(i).toAssembly;
    assert(asmStr == "and c",  "`"~ asmStr ~ "` != `and c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xA2] ).getInstruction(i).toAssembly;
    assert(asmStr == "and d",  "`"~ asmStr ~ "` != `and d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xA3] ).getInstruction(i).toAssembly;
    assert(asmStr == "and e",  "`"~ asmStr ~ "` != `and e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xA4] ).getInstruction(i).toAssembly;
    assert(asmStr == "and h",  "`"~ asmStr ~ "` != `and h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xA5] ).getInstruction(i).toAssembly;
    assert(asmStr == "and l",  "`"~ asmStr ~ "` != `and l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xA6] ).getInstruction(i).toAssembly;
    assert(asmStr == "and (hl)",  "`"~ asmStr ~ "` != `and (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xA7] ).getInstruction(i).toAssembly;
    assert(asmStr == "and a",  "`"~ asmStr ~ "` != `and a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xA8] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor b",  "`"~ asmStr ~ "` != `xor b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xA9] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor c",  "`"~ asmStr ~ "` != `xor c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xAA] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor d",  "`"~ asmStr ~ "` != `xor d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xAB] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor e",  "`"~ asmStr ~ "` != `xor e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xAC] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor h",  "`"~ asmStr ~ "` != `xor h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xAD] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor l",  "`"~ asmStr ~ "` != `xor l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xAE] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor (hl)",  "`"~ asmStr ~ "` != `xor (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xAF] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor a",  "`"~ asmStr ~ "` != `xor a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xB0] ).getInstruction(i).toAssembly;
    assert(asmStr == "or b",  "`"~ asmStr ~ "` != `or b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xB1] ).getInstruction(i).toAssembly;
    assert(asmStr == "or c",  "`"~ asmStr ~ "` != `or c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xB2] ).getInstruction(i).toAssembly;
    assert(asmStr == "or d",  "`"~ asmStr ~ "` != `or d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xB3] ).getInstruction(i).toAssembly;
    assert(asmStr == "or e",  "`"~ asmStr ~ "` != `or e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xB4] ).getInstruction(i).toAssembly;
    assert(asmStr == "or h",  "`"~ asmStr ~ "` != `or h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xB5] ).getInstruction(i).toAssembly;
    assert(asmStr == "or l",  "`"~ asmStr ~ "` != `or l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xB6] ).getInstruction(i).toAssembly;
    assert(asmStr == "or (hl)",  "`"~ asmStr ~ "` != `or (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xB7] ).getInstruction(i).toAssembly;
    assert(asmStr == "or a",  "`"~ asmStr ~ "` != `or a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xB8] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp b",  "`"~ asmStr ~ "` != `cp b`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xB9] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp c",  "`"~ asmStr ~ "` != `cp c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xBA] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp d",  "`"~ asmStr ~ "` != `cp d`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xBB] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp e",  "`"~ asmStr ~ "` != `cp e`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xBC] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp h",  "`"~ asmStr ~ "` != `cp h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xBD] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp l",  "`"~ asmStr ~ "` != `cp l`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xBE] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp (hl)",  "`"~ asmStr ~ "` != `cp (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xBF] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp a",  "`"~ asmStr ~ "` != `cp a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xC0] ).getInstruction(i).toAssembly;
    assert(asmStr == "ret nz",  "`"~ asmStr ~ "` != `ret nz`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xC1] ).getInstruction(i).toAssembly;
    assert(asmStr == "pop bc",  "`"~ asmStr ~ "` != `pop bc`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xC2, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jp nz, 0000h",  "`"~ asmStr ~ "` != `jp nz, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xC3, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jp 0000h",  "`"~ asmStr ~ "` != `jp 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xC4, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "call nz, 0000h",  "`"~ asmStr ~ "` != `call nz, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xC5] ).getInstruction(i).toAssembly;
    assert(asmStr == "push bc",  "`"~ asmStr ~ "` != `push bc`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xC6, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "add a, 00h",  "`"~ asmStr ~ "` != `add a, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xC7] ).getInstruction(i).toAssembly;
    assert(asmStr == "rst 00h",  "`"~ asmStr ~ "` != `rst 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xC8] ).getInstruction(i).toAssembly;
    assert(asmStr == "ret z",  "`"~ asmStr ~ "` != `ret z`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xC9] ).getInstruction(i).toAssembly;
    assert(asmStr == "ret",  "`"~ asmStr ~ "` != `ret`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCA, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jp z, 0000h",  "`"~ asmStr ~ "` != `jp z, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCC, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "call z, 0000h",  "`"~ asmStr ~ "` != `call z, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCD, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "call 0000h",  "`"~ asmStr ~ "` != `call 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCE, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "adc a, 00h",  "`"~ asmStr ~ "` != `adc a, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xCF] ).getInstruction(i).toAssembly;
    assert(asmStr == "rst 08h",  "`"~ asmStr ~ "` != `rst 08h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xD0] ).getInstruction(i).toAssembly;
    assert(asmStr == "ret nc",  "`"~ asmStr ~ "` != `ret nc`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xD1] ).getInstruction(i).toAssembly;
    assert(asmStr == "pop de",  "`"~ asmStr ~ "` != `pop de`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xD2, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jp nc, 0000h",  "`"~ asmStr ~ "` != `jp nc, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xD3, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "out (00h), a",  "`"~ asmStr ~ "` != `out (00h), a`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xD4, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "call nc, 0000h",  "`"~ asmStr ~ "` != `call nc, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xD5] ).getInstruction(i).toAssembly;
    assert(asmStr == "push de",  "`"~ asmStr ~ "` != `push de`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xD6, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "sub 00h",  "`"~ asmStr ~ "` != `sub 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xD7] ).getInstruction(i).toAssembly;
    assert(asmStr == "rst 10h",  "`"~ asmStr ~ "` != `rst 10h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xD8] ).getInstruction(i).toAssembly;
    assert(asmStr == "ret c",  "`"~ asmStr ~ "` != `ret c`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xD9] ).getInstruction(i).toAssembly;
    assert(asmStr == "exx",  "`"~ asmStr ~ "` != `exx`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDA, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jp c, 0000h",  "`"~ asmStr ~ "` != `jp c, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDB, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "in a, (00h)",  "`"~ asmStr ~ "` != `in a, (00h)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDC, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "call c, 0000h",  "`"~ asmStr ~ "` != `call c, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDE, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "sbc a, 00h",  "`"~ asmStr ~ "` != `sbc a, 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xDF] ).getInstruction(i).toAssembly;
    assert(asmStr == "rst 18h",  "`"~ asmStr ~ "` != `rst 18h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xE0] ).getInstruction(i).toAssembly;
    assert(asmStr == "ret po",  "`"~ asmStr ~ "` != `ret po`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xE1] ).getInstruction(i).toAssembly;
    assert(asmStr == "pop hl",  "`"~ asmStr ~ "` != `pop hl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xE2, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jp po, 0000h",  "`"~ asmStr ~ "` != `jp po, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xE3] ).getInstruction(i).toAssembly;
    assert(asmStr == "ex (sp), hl",  "`"~ asmStr ~ "` != `ex (sp), hl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xE4, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "call po, 0000h",  "`"~ asmStr ~ "` != `call po, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xE5] ).getInstruction(i).toAssembly;
    assert(asmStr == "push hl",  "`"~ asmStr ~ "` != `push hl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xE6, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "and 00h",  "`"~ asmStr ~ "` != `and 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xE7] ).getInstruction(i).toAssembly;
    assert(asmStr == "rst 20h",  "`"~ asmStr ~ "` != `rst 20h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xE8] ).getInstruction(i).toAssembly;
    assert(asmStr == "ret pe",  "`"~ asmStr ~ "` != `ret pe`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xE9] ).getInstruction(i).toAssembly;
    assert(asmStr == "jp (hl)",  "`"~ asmStr ~ "` != `jp (hl)`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xEA, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jp pe, 0000h",  "`"~ asmStr ~ "` != `jp pe, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xEB] ).getInstruction(i).toAssembly;
    assert(asmStr == "ex de, hl",  "`"~ asmStr ~ "` != `ex de, hl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xEC, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "call pe, 0000h",  "`"~ asmStr ~ "` != `call pe, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xEE, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "xor 00h",  "`"~ asmStr ~ "` != `xor 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xEF] ).getInstruction(i).toAssembly;
    assert(asmStr == "rst 28h",  "`"~ asmStr ~ "` != `rst 28h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xF0] ).getInstruction(i).toAssembly;
    assert(asmStr == "ret p",  "`"~ asmStr ~ "` != `ret p`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xF1] ).getInstruction(i).toAssembly;
    assert(asmStr == "pop af",  "`"~ asmStr ~ "` != `pop af`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xF2, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jp p, 0000h",  "`"~ asmStr ~ "` != `jp p, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xF3] ).getInstruction(i).toAssembly;
    assert(asmStr == "di",  "`"~ asmStr ~ "` != `di`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xF4, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "call p, 0000h",  "`"~ asmStr ~ "` != `call p, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xF5] ).getInstruction(i).toAssembly;
    assert(asmStr == "push af",  "`"~ asmStr ~ "` != `push af`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xF6, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "or 00h",  "`"~ asmStr ~ "` != `or 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xF7] ).getInstruction(i).toAssembly;
    assert(asmStr == "rst 30h",  "`"~ asmStr ~ "` != `rst 30h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xF8] ).getInstruction(i).toAssembly;
    assert(asmStr == "ret m",  "`"~ asmStr ~ "` != `ret m`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xF9] ).getInstruction(i).toAssembly;
    assert(asmStr == "ld sp, hl",  "`"~ asmStr ~ "` != `ld sp, hl`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFA, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "jp m, 0000h",  "`"~ asmStr ~ "` != `jp m, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFB] ).getInstruction(i).toAssembly;
    assert(asmStr == "ei",  "`"~ asmStr ~ "` != `ei`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFC, 0x00, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "call m, 0000h",  "`"~ asmStr ~ "` != `call m, 0000h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFE, 0x00] ).getInstruction(i).toAssembly;
    assert(asmStr == "cp 00h",  "`"~ asmStr ~ "` != `cp 00h`");
    i = 0;
    asmStr = ( cast(ubyte[])[0xFF] ).getInstruction(i).toAssembly;
    assert(asmStr == "rst 38h",  "`"~ asmStr ~ "` != `rst 38h`");
    
}