import json
inp = """[["nop","00"],["ld bc,<var>nn</var>","01  <var>nn</var>"],["ld (bc),a","02"],["inc bc","03"],["inc b","04"],["dec b","05"],["ld b,<var>n</var>","06  <var>n</var>"],["rlca","07"],["ex af,af'","08"],["add hl,bc","09"],["ld a,(bc)","0A"],["dec bc","0B"],["inc c","0C"],["dec c","0D"],["ld c,<var>n</var>","0E  <var>n</var>"],["rrca","0F"],["djnz <var>d</var>","10  <var>d</var>-$-2"],["ld de,<var>nn</var>","11  <var>nn</var>"],["ld (de),a","12"],["inc de","13"],["inc d","14"],["dec d","15"],["ld d,<var>n</var>","16  <var>n</var>"],["rla","17"],["jr <var>d</var>","18  <var>d</var>-$-2"],["add hl,de","19"],["ld a,(de)","1A"],["dec de","1B"],["inc e","1C"],["dec e","1D"],["ld e,<var>n</var>","1E  <var>n</var>"],["rra","1F"],["jr nz,<var>d</var>","20  <var>d</var>-$-2"],["ld hl,<var>nn</var>","21  <var>nn</var>"],["ld (<var>nn</var>),hl","22  <var>nn</var>"],["inc hl","23"],["inc h","24"],["dec h","25"],["ld h,<var>n</var>","26  <var>n</var>"],["daa","27"],["jr z,<var>d</var>","28  <var>d</var>-$-2"],["add hl,hl","29"],["ld hl,(<var>nn</var>)","2A  <var>nn</var>"],["dec hl","2B"],["inc l","2C"],["dec l","2D"],["ld l,<var>n</var>","2E  <var>n</var>"],["cpl","2F"],["jr nc,<var>d</var>","30  <var>d</var>-$-2"],["ld sp,<var>nn</var>","31  <var>nn</var>"],["ld (<var>nn</var>),a","32  <var>nn</var>"],["inc sp","33"],["inc (hl)","34"],["dec (hl)","35"],["ld (hl),<var>n</var>","36  <var>n</var>"],["scf","37"],["jr c,<var>d</var>","38  <var>d</var>-$-2"],["add hl,sp","39"],["ld a,(<var>nn</var>)","3A  <var>nn</var>"],["dec sp","3B"],["inc a","3C"],["dec a","3D"],["ld a,<var>n</var>","3E  <var>n</var>"],["ccf","3F"],["ld b,b","40"],["ld b,c","41"],["ld b,d","42"],["ld b,e","43"],["ld b,h","44"],["ld b,l","45"],["ld b,(hl)","46"],["ld b,a","47"],["ld c,b","48"],["ld c,c","49"],["ld c,d","4A"],["ld c,e","4B"],["ld c,h","4C"],["ld c,l","4D"],["ld c,(hl)","4E"],["ld c,a","4F"],["ld d,b","50"],["ld d,c","51"],["ld d,d","52"],["ld d,e","53"],["ld d,h","54"],["ld d,l","55"],["ld d,(hl)","56"],["ld d,a","57"],["ld e,b","58"],["ld e,c","59"],["ld e,d","5A"],["ld e,e","5B"],["ld e,h","5C"],["ld e,l","5D"],["ld e,(hl)","5E"],["ld e,a","5F"],["ld h,b","60"],["ld h,c","61"],["ld h,d","62"],["ld h,e","63"],["ld h,h","64"],["ld h,l","65"],["ld h,(hl)","66"],["ld h,a","67"],["ld l,b","68"],["ld l,c","69"],["ld l,d","6A"],["ld l,e","6B"],["ld l,h","6C"],["ld l,l","6D"],["ld l,(hl)","6E"],["ld l,a","6F"],["ld (hl),b","70"],["ld (hl),c","71"],["ld (hl),d","72"],["ld (hl),e","73"],["ld (hl),h","74"],["ld (hl),l","75"],["halt","76"],["ld (hl),a","77"],["ld a,b","78"],["ld a,c","79"],["ld a,d","7A"],["ld a,e","7B"],["ld a,h","7C"],["ld a,l","7D"],["ld a,(hl)","7E"],["ld a,a","7F"],["add a,b","80"],["add a,c","81"],["add a,d","82"],["add a,e","83"],["add a,h","84"],["add a,l","85"],["add a,(hl)","86"],["add a,a","87"],["adc a,b","88"],["adc a,c","89"],["adc a,d","8A"],["adc a,e","8B"],["adc a,h","8C"],["adc a,l","8D"],["adc a,(hl)","8E"],["adc a,a","8F"],["sub b","90"],["sub c","91"],["sub d","92"],["sub e","93"],["sub h","94"],["sub l","95"],["sub (hl)","96"],["sub a","97"],["sbc a,b","98"],["sbc a,c","99"],["sbc a,d","9A"],["sbc a,e","9B"],["sbc a,h","9C"],["sbc a,l","9D"],["sbc a,(hl)","9E"],["sbc a,a","9F"],["and b","A0"],["and c","A1"],["and d","A2"],["and e","A3"],["and h","A4"],["and l","A5"],["and (hl)","A6"],["and a","A7"],["xor b","A8"],["xor c","A9"],["xor d","AA"],["xor e","AB"],["xor h","AC"],["xor l","AD"],["xor (hl)","AE"],["xor a","AF"],["or b","B0"],["or c","B1"],["or d","B2"],["or e","B3"],["or h","B4"],["or l","B5"],["or (hl)","B6"],["or a","B7"],["cp b","B8"],["cp c","B9"],["cp d","BA"],["cp e","BB"],["cp h","BC"],["cp l","BD"],["cp (hl)","BE"],["cp a","BF"],["ret nz","C0"],["pop bc","C1"],["jp nz,<var>nn</var>","C2  <var>nn</var>"],["jp <var>nn</var>","C3  <var>nn</var>"],["call nz,<var>nn</var>","C4  <var>nn</var>"],["push bc","C5"],["add a,<var>n</var>","C6  <var>n</var>"],["rst 00h","C7"],["ret z","C8"],["ret","C9"],["jp z,<var>nn</var>","CA  <var>nn</var>"],["call z,<var>nn</var>","CC  <var>nn</var>"],["call <var>nn</var>","CD  <var>nn</var>"],["adc a,<var>n</var>","CE  <var>n</var>"],["rst 08h","CF"],["ret nc","D0"],["pop de","D1"],["jp nc,<var>nn</var>","D2  <var>nn</var>"],["out (<var>n</var>),a","D3  <var>n</var>"],["call nc,<var>nn</var>","D4  <var>nn</var>"],["push de","D5"],["sub <var>n</var>","D6  <var>n</var>"],["rst 10h","D7"],["ret c","D8"],["exx","D9"],["jp c,<var>nn</var>","DA  <var>nn</var>"],["in a,(<var>n</var>)","DB  <var>n</var>"],["call c,<var>nn</var>","DC  <var>nn</var>"],["sbc a,<var>n</var>","DE  <var>n</var>"],["rst 18h","DF"],["ret po","E0"],["pop hl","E1"],["jp po,<var>nn</var>","E2  <var>nn</var>"],["ex (sp),hl","E3"],["call po,<var>nn</var>","E4  <var>nn</var>"],["push hl","E5"],["and <var>n</var>","E6  <var>n</var>"],["rst 20h","E7"],["ret pe","E8"],["jp (hl)","E9"],["jp pe,<var>nn</var>","EA  <var>nn</var>"],["ex de,hl","EB"],["call pe,<var>nn</var>","EC  <var>nn</var>"],["xor <var>n</var>","EE  <var>n</var>"],["rst 28h","EF"],["ret p","F0"],["pop af","F1"],["jp p,<var>nn</var>","F2  <var>nn</var>"],["di","F3"],["call p,<var>nn</var>","F4  <var>nn</var>"],["push af","F5"],["or <var>n</var>","F6  <var>n</var>"],["rst 30h","F7"],["ret m","F8"],["ld sp,hl","F9"],["jp m,<var>nn</var>","FA  <var>nn</var>"],["ei","FB"],["call m,<var>nn</var>","FC  <var>nn</var>"],["cp <var>n</var>","FE  <var>n</var>"],["rst 38h","FF"]]"""

print("size_t i;")
print("string asmStr;")
for opcode in json.loads(inp):
    byteData = [v for v in opcode[1].replace("\t", " ").split(" ") if v != " " and v]
    hexByteData = []
    for b in byteData:
        if b == "<var>n</var>" or b == "<var>d</var>-$-2" or b == "<var>d</var>":
            hexByteData.append("0x00")
        elif b == "<var>nn</var>":
            hexByteData.append("0x00")
            hexByteData.append("0x00")
        else:
            hexByteData.append("0x"+b)
    pStr = opcode[0].replace(",", ", ").replace("<var>n</var>", "00h").replace("<var>nn</var>", "0000h").replace("<var>d</var>", "00h")

    print("i = 0;")
    print(f"asmStr = ( cast(ubyte[])[{', '.join(hexByteData)}] ).getInstruction(i).toAssembly;")
    print(f'assert(asmStr == "{pStr}",  "`"~ asmStr ~ "` != `{pStr}`");');
    